// Definition of Model File Structure
// Version 0.1

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: results.proto

package results

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MapDataType int32

const (
	MapDataType_MAP_INT8    MapDataType = 0
	MapDataType_MAP_INT16   MapDataType = 1
	MapDataType_MAP_INT32   MapDataType = 2
	MapDataType_MAP_INT64   MapDataType = 3
	MapDataType_MAP_UINT8   MapDataType = 4
	MapDataType_MAP_UINT16  MapDataType = 5
	MapDataType_MAP_UINT32  MapDataType = 6
	MapDataType_MAP_UINT64  MapDataType = 7
	MapDataType_MAP_FLOAT8  MapDataType = 8
	MapDataType_MAP_FLOAT16 MapDataType = 9
	MapDataType_MAP_FLOAT32 MapDataType = 10
	MapDataType_MAP_FLOAT64 MapDataType = 11
)

// Enum value maps for MapDataType.
var (
	MapDataType_name = map[int32]string{
		0:  "MAP_INT8",
		1:  "MAP_INT16",
		2:  "MAP_INT32",
		3:  "MAP_INT64",
		4:  "MAP_UINT8",
		5:  "MAP_UINT16",
		6:  "MAP_UINT32",
		7:  "MAP_UINT64",
		8:  "MAP_FLOAT8",
		9:  "MAP_FLOAT16",
		10: "MAP_FLOAT32",
		11: "MAP_FLOAT64",
	}
	MapDataType_value = map[string]int32{
		"MAP_INT8":    0,
		"MAP_INT16":   1,
		"MAP_INT32":   2,
		"MAP_INT64":   3,
		"MAP_UINT8":   4,
		"MAP_UINT16":  5,
		"MAP_UINT32":  6,
		"MAP_UINT64":  7,
		"MAP_FLOAT8":  8,
		"MAP_FLOAT16": 9,
		"MAP_FLOAT32": 10,
		"MAP_FLOAT64": 11,
	}
)

func (x MapDataType) Enum() *MapDataType {
	p := new(MapDataType)
	*p = x
	return p
}

func (x MapDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MapDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_results_proto_enumTypes[0].Descriptor()
}

func (MapDataType) Type() protoreflect.EnumType {
	return &file_results_proto_enumTypes[0]
}

func (x MapDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MapDataType.Descriptor instead.
func (MapDataType) EnumDescriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{0}
}

type ModelType int32

const (
	ModelType_REGULAR         ModelType = 0
	ModelType_AREA_DEFINITION ModelType = 1
)

// Enum value maps for ModelType.
var (
	ModelType_name = map[int32]string{
		0: "REGULAR",
		1: "AREA_DEFINITION",
	}
	ModelType_value = map[string]int32{
		"REGULAR":         0,
		"AREA_DEFINITION": 1,
	}
)

func (x ModelType) Enum() *ModelType {
	p := new(ModelType)
	*p = x
	return p
}

func (x ModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_results_proto_enumTypes[1].Descriptor()
}

func (ModelType) Type() protoreflect.EnumType {
	return &file_results_proto_enumTypes[1]
}

func (x ModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelType.Descriptor instead.
func (ModelType) EnumDescriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{1}
}

type ModelOutputType int32

const (
	ModelOutputType_TYPE_UNKNOWN                       ModelOutputType = 0
	ModelOutputType_TYPE_CLASSIFICATION                ModelOutputType = 1
	ModelOutputType_TYPE_SEGMENTATION                  ModelOutputType = 2
	ModelOutputType_TYPE_INSTANCE_SEGMENTATION         ModelOutputType = 3
	ModelOutputType_TYPE_OBJECT_DETECTION              ModelOutputType = 4
	ModelOutputType_TYPE_ANOMALY_DETECTION             ModelOutputType = 5
	ModelOutputType_TYPE_OPTICAL_CHARACTER_RECOGNITION ModelOutputType = 6
)

// Enum value maps for ModelOutputType.
var (
	ModelOutputType_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "TYPE_CLASSIFICATION",
		2: "TYPE_SEGMENTATION",
		3: "TYPE_INSTANCE_SEGMENTATION",
		4: "TYPE_OBJECT_DETECTION",
		5: "TYPE_ANOMALY_DETECTION",
		6: "TYPE_OPTICAL_CHARACTER_RECOGNITION",
	}
	ModelOutputType_value = map[string]int32{
		"TYPE_UNKNOWN":                       0,
		"TYPE_CLASSIFICATION":                1,
		"TYPE_SEGMENTATION":                  2,
		"TYPE_INSTANCE_SEGMENTATION":         3,
		"TYPE_OBJECT_DETECTION":              4,
		"TYPE_ANOMALY_DETECTION":             5,
		"TYPE_OPTICAL_CHARACTER_RECOGNITION": 6,
	}
)

func (x ModelOutputType) Enum() *ModelOutputType {
	p := new(ModelOutputType)
	*p = x
	return p
}

func (x ModelOutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelOutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_results_proto_enumTypes[2].Descriptor()
}

func (ModelOutputType) Type() protoreflect.EnumType {
	return &file_results_proto_enumTypes[2]
}

func (x ModelOutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelOutputType.Descriptor instead.
func (ModelOutputType) EnumDescriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{2}
}

type DeviceType int32

const (
	DeviceType_UNDEFINED DeviceType = 0
	DeviceType_CPU       DeviceType = 1
	DeviceType_GPU       DeviceType = 2
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "UNDEFINED",
		1: "CPU",
		2: "GPU",
	}
	DeviceType_value = map[string]int32{
		"UNDEFINED": 0,
		"CPU":       1,
		"GPU":       2,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_results_proto_enumTypes[3].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_results_proto_enumTypes[3]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{3}
}

type DefectAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetIndex        int32   `protobuf:"varint,1,opt,name=dataset_index,json=datasetIndex,proto3" json:"dataset_index,omitempty"`
	ModelId             int32   `protobuf:"varint,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	FeatureIndex        int32   `protobuf:"varint,3,opt,name=feature_index,json=featureIndex,proto3" json:"feature_index,omitempty"`
	OverlapArea         float64 `protobuf:"fixed64,4,opt,name=overlap_area,json=overlapArea,proto3" json:"overlap_area,omitempty"`
	OverlapRatio        float64 `protobuf:"fixed64,5,opt,name=overlap_ratio,json=overlapRatio,proto3" json:"overlap_ratio,omitempty"`
	OverlapRatioOfOther float64 `protobuf:"fixed64,6,opt,name=overlap_ratio_of_other,json=overlapRatioOfOther,proto3" json:"overlap_ratio_of_other,omitempty"`
	FeatureUid          string  `protobuf:"bytes,7,opt,name=feature_uid,json=featureUid,proto3" json:"feature_uid,omitempty"`
}

func (x *DefectAddress) Reset() {
	*x = DefectAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefectAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefectAddress) ProtoMessage() {}

func (x *DefectAddress) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefectAddress.ProtoReflect.Descriptor instead.
func (*DefectAddress) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{0}
}

func (x *DefectAddress) GetDatasetIndex() int32 {
	if x != nil {
		return x.DatasetIndex
	}
	return 0
}

func (x *DefectAddress) GetModelId() int32 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *DefectAddress) GetFeatureIndex() int32 {
	if x != nil {
		return x.FeatureIndex
	}
	return 0
}

func (x *DefectAddress) GetOverlapArea() float64 {
	if x != nil {
		return x.OverlapArea
	}
	return 0
}

func (x *DefectAddress) GetOverlapRatio() float64 {
	if x != nil {
		return x.OverlapRatio
	}
	return 0
}

func (x *DefectAddress) GetOverlapRatioOfOther() float64 {
	if x != nil {
		return x.OverlapRatioOfOther
	}
	return 0
}

func (x *DefectAddress) GetFeatureUid() string {
	if x != nil {
		return x.FeatureUid
	}
	return ""
}

type RowRLC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffsetX int32 `protobuf:"varint,1,opt,name=offset_x,json=offsetX,proto3" json:"offset_x,omitempty"`
	OffsetY int32 `protobuf:"varint,2,opt,name=offset_y,json=offsetY,proto3" json:"offset_y,omitempty"`
	Length  int32 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *RowRLC) Reset() {
	*x = RowRLC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowRLC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowRLC) ProtoMessage() {}

func (x *RowRLC) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowRLC.ProtoReflect.Descriptor instead.
func (*RowRLC) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{1}
}

func (x *RowRLC) GetOffsetX() int32 {
	if x != nil {
		return x.OffsetX
	}
	return 0
}

func (x *RowRLC) GetOffsetY() int32 {
	if x != nil {
		return x.OffsetY
	}
	return 0
}

func (x *RowRLC) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type OcrCharacter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Character   string  `protobuf:"bytes,1,opt,name=character,proto3" json:"character,omitempty"`
	Probability float64 `protobuf:"fixed64,2,opt,name=probability,proto3" json:"probability,omitempty"`
}

func (x *OcrCharacter) Reset() {
	*x = OcrCharacter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OcrCharacter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OcrCharacter) ProtoMessage() {}

func (x *OcrCharacter) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OcrCharacter.ProtoReflect.Descriptor instead.
func (*OcrCharacter) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{2}
}

func (x *OcrCharacter) GetCharacter() string {
	if x != nil {
		return x.Character
	}
	return ""
}

func (x *OcrCharacter) GetProbability() float64 {
	if x != nil {
		return x.Probability
	}
	return 0
}

type OcrCharacterPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OcrCharacter []*OcrCharacter `protobuf:"bytes,1,rep,name=ocr_character,json=ocrCharacter,proto3" json:"ocr_character,omitempty"`
}

func (x *OcrCharacterPosition) Reset() {
	*x = OcrCharacterPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OcrCharacterPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OcrCharacterPosition) ProtoMessage() {}

func (x *OcrCharacterPosition) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OcrCharacterPosition.ProtoReflect.Descriptor instead.
func (*OcrCharacterPosition) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{3}
}

func (x *OcrCharacterPosition) GetOcrCharacter() []*OcrCharacter {
	if x != nil {
		return x.OcrCharacter
	}
	return nil
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{4}
}

func (x *Point) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Point) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

type MinimalBoundingBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CenterX float64 `protobuf:"fixed64,1,opt,name=center_x,json=centerX,proto3" json:"center_x,omitempty"`
	CenterY float64 `protobuf:"fixed64,2,opt,name=center_y,json=centerY,proto3" json:"center_y,omitempty"`
	Width   float64 `protobuf:"fixed64,3,opt,name=width,proto3" json:"width,omitempty"`
	Height  float64 `protobuf:"fixed64,4,opt,name=height,proto3" json:"height,omitempty"`
	Angle   float64 `protobuf:"fixed64,5,opt,name=angle,proto3" json:"angle,omitempty"`
}

func (x *MinimalBoundingBox) Reset() {
	*x = MinimalBoundingBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinimalBoundingBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinimalBoundingBox) ProtoMessage() {}

func (x *MinimalBoundingBox) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinimalBoundingBox.ProtoReflect.Descriptor instead.
func (*MinimalBoundingBox) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{5}
}

func (x *MinimalBoundingBox) GetCenterX() float64 {
	if x != nil {
		return x.CenterX
	}
	return 0
}

func (x *MinimalBoundingBox) GetCenterY() float64 {
	if x != nil {
		return x.CenterY
	}
	return 0
}

func (x *MinimalBoundingBox) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MinimalBoundingBox) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *MinimalBoundingBox) GetAngle() float64 {
	if x != nil {
		return x.Angle
	}
	return 0
}

type FeatureField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label                   string                  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Show                    bool                    `protobuf:"varint,2,opt,name=show,proto3" json:"show,omitempty"`
	Color                   []int32                 `protobuf:"varint,3,rep,packed,name=color,proto3" json:"color,omitempty"`
	RectX                   int32                   `protobuf:"varint,4,opt,name=rect_x,json=rectX,proto3" json:"rect_x,omitempty"`
	RectY                   int32                   `protobuf:"varint,5,opt,name=rect_y,json=rectY,proto3" json:"rect_y,omitempty"`
	RectW                   int32                   `protobuf:"varint,6,opt,name=rect_w,json=rectW,proto3" json:"rect_w,omitempty"`
	RectH                   int32                   `protobuf:"varint,7,opt,name=rect_h,json=rectH,proto3" json:"rect_h,omitempty"`
	Probability             float64                 `protobuf:"fixed64,8,opt,name=probability,proto3" json:"probability,omitempty"`
	Area                    float64                 `protobuf:"fixed64,9,opt,name=area,proto3" json:"area,omitempty"`
	Length                  float64                 `protobuf:"fixed64,10,opt,name=length,proto3" json:"length,omitempty"`
	Width                   float64                 `protobuf:"fixed64,11,opt,name=width,proto3" json:"width,omitempty"`
	MeanGray                float64                 `protobuf:"fixed64,12,opt,name=mean_gray,json=meanGray,proto3" json:"mean_gray,omitempty"`
	MaxGray                 float64                 `protobuf:"fixed64,13,opt,name=max_gray,json=maxGray,proto3" json:"max_gray,omitempty"`
	MinGray                 float64                 `protobuf:"fixed64,14,opt,name=min_gray,json=minGray,proto3" json:"min_gray,omitempty"`
	InArea                  []int32                 `protobuf:"varint,15,rep,packed,name=in_area,json=inArea,proto3" json:"in_area,omitempty"`
	OverlapsWith            []*DefectAddress        `protobuf:"bytes,16,rep,name=overlaps_with,json=overlapsWith,proto3" json:"overlaps_with,omitempty"`
	RectXMm                 float64                 `protobuf:"fixed64,17,opt,name=rect_x_mm,json=rectXMm,proto3" json:"rect_x_mm,omitempty"`
	RectYMm                 float64                 `protobuf:"fixed64,18,opt,name=rect_y_mm,json=rectYMm,proto3" json:"rect_y_mm,omitempty"`
	RectWMm                 float64                 `protobuf:"fixed64,19,opt,name=rect_w_mm,json=rectWMm,proto3" json:"rect_w_mm,omitempty"`
	RectHMm                 float64                 `protobuf:"fixed64,20,opt,name=rect_h_mm,json=rectHMm,proto3" json:"rect_h_mm,omitempty"`
	RowRlc                  []*RowRLC               `protobuf:"bytes,21,rep,name=row_rlc,json=rowRlc,proto3" json:"row_rlc,omitempty"`
	OcrCharacterPosition    []*OcrCharacterPosition `protobuf:"bytes,22,rep,name=ocr_character_position,json=ocrCharacterPosition,proto3" json:"ocr_character_position,omitempty"`
	MinimalBoundingBox      *MinimalBoundingBox     `protobuf:"bytes,23,opt,name=minimal_bounding_box,json=minimalBoundingBox,proto3" json:"minimal_bounding_box,omitempty"`
	MinimalBoundingBoxPoint []*Point                `protobuf:"bytes,24,rep,name=minimal_bounding_box_point,json=minimalBoundingBoxPoint,proto3" json:"minimal_bounding_box_point,omitempty"`
	WriteProtectedLabel     bool                    `protobuf:"varint,25,opt,name=write_protected_label,json=writeProtectedLabel,proto3" json:"write_protected_label,omitempty"`
}

func (x *FeatureField) Reset() {
	*x = FeatureField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureField) ProtoMessage() {}

func (x *FeatureField) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureField.ProtoReflect.Descriptor instead.
func (*FeatureField) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{6}
}

func (x *FeatureField) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FeatureField) GetShow() bool {
	if x != nil {
		return x.Show
	}
	return false
}

func (x *FeatureField) GetColor() []int32 {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *FeatureField) GetRectX() int32 {
	if x != nil {
		return x.RectX
	}
	return 0
}

func (x *FeatureField) GetRectY() int32 {
	if x != nil {
		return x.RectY
	}
	return 0
}

func (x *FeatureField) GetRectW() int32 {
	if x != nil {
		return x.RectW
	}
	return 0
}

func (x *FeatureField) GetRectH() int32 {
	if x != nil {
		return x.RectH
	}
	return 0
}

func (x *FeatureField) GetProbability() float64 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *FeatureField) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *FeatureField) GetLength() float64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *FeatureField) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *FeatureField) GetMeanGray() float64 {
	if x != nil {
		return x.MeanGray
	}
	return 0
}

func (x *FeatureField) GetMaxGray() float64 {
	if x != nil {
		return x.MaxGray
	}
	return 0
}

func (x *FeatureField) GetMinGray() float64 {
	if x != nil {
		return x.MinGray
	}
	return 0
}

func (x *FeatureField) GetInArea() []int32 {
	if x != nil {
		return x.InArea
	}
	return nil
}

func (x *FeatureField) GetOverlapsWith() []*DefectAddress {
	if x != nil {
		return x.OverlapsWith
	}
	return nil
}

func (x *FeatureField) GetRectXMm() float64 {
	if x != nil {
		return x.RectXMm
	}
	return 0
}

func (x *FeatureField) GetRectYMm() float64 {
	if x != nil {
		return x.RectYMm
	}
	return 0
}

func (x *FeatureField) GetRectWMm() float64 {
	if x != nil {
		return x.RectWMm
	}
	return 0
}

func (x *FeatureField) GetRectHMm() float64 {
	if x != nil {
		return x.RectHMm
	}
	return 0
}

func (x *FeatureField) GetRowRlc() []*RowRLC {
	if x != nil {
		return x.RowRlc
	}
	return nil
}

func (x *FeatureField) GetOcrCharacterPosition() []*OcrCharacterPosition {
	if x != nil {
		return x.OcrCharacterPosition
	}
	return nil
}

func (x *FeatureField) GetMinimalBoundingBox() *MinimalBoundingBox {
	if x != nil {
		return x.MinimalBoundingBox
	}
	return nil
}

func (x *FeatureField) GetMinimalBoundingBoxPoint() []*Point {
	if x != nil {
		return x.MinimalBoundingBoxPoint
	}
	return nil
}

func (x *FeatureField) GetWriteProtectedLabel() bool {
	if x != nil {
		return x.WriteProtectedLabel
	}
	return false
}

// requires complementary array of type "datatype"
type MapField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label         string      `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Show          bool        `protobuf:"varint,2,opt,name=show,proto3" json:"show,omitempty"`
	Color         []int32     `protobuf:"varint,3,rep,packed,name=color,proto3" json:"color,omitempty"`
	Datatype      MapDataType `protobuf:"varint,4,opt,name=datatype,proto3,enum=results.MapDataType" json:"datatype,omitempty"`
	ImageW        int32       `protobuf:"varint,5,opt,name=image_w,json=imageW,proto3" json:"image_w,omitempty"`
	ImageH        int32       `protobuf:"varint,6,opt,name=image_h,json=imageH,proto3" json:"image_h,omitempty"`
	ImageC        int32       `protobuf:"varint,7,opt,name=image_c,json=imageC,proto3" json:"image_c,omitempty"`
	StartPosition int32       `protobuf:"varint,8,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	EndPosition   int32       `protobuf:"varint,9,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
}

func (x *MapField) Reset() {
	*x = MapField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapField) ProtoMessage() {}

func (x *MapField) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapField.ProtoReflect.Descriptor instead.
func (*MapField) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{7}
}

func (x *MapField) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *MapField) GetShow() bool {
	if x != nil {
		return x.Show
	}
	return false
}

func (x *MapField) GetColor() []int32 {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *MapField) GetDatatype() MapDataType {
	if x != nil {
		return x.Datatype
	}
	return MapDataType_MAP_INT8
}

func (x *MapField) GetImageW() int32 {
	if x != nil {
		return x.ImageW
	}
	return 0
}

func (x *MapField) GetImageH() int32 {
	if x != nil {
		return x.ImageH
	}
	return 0
}

func (x *MapField) GetImageC() int32 {
	if x != nil {
		return x.ImageC
	}
	return 0
}

func (x *MapField) GetStartPosition() int32 {
	if x != nil {
		return x.StartPosition
	}
	return 0
}

func (x *MapField) GetEndPosition() int32 {
	if x != nil {
		return x.EndPosition
	}
	return 0
}

type ResultField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelLabel           string          `protobuf:"bytes,1,opt,name=model_label,json=modelLabel,proto3" json:"model_label,omitempty"`
	ModelTag             string          `protobuf:"bytes,2,opt,name=model_tag,json=modelTag,proto3" json:"model_tag,omitempty"`
	ModelId              int32           `protobuf:"varint,3,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"` // deprecated
	Classifier           float64         `protobuf:"fixed64,4,opt,name=classifier,proto3" json:"classifier,omitempty"`
	EvaluationTimeMs     float64         `protobuf:"fixed64,5,opt,name=evaluation_time_ms,json=evaluationTimeMs,proto3" json:"evaluation_time_ms,omitempty"`
	PostProcessingTimeMs float64         `protobuf:"fixed64,6,opt,name=post_processing_time_ms,json=postProcessingTimeMs,proto3" json:"post_processing_time_ms,omitempty"`
	ResultMap            []*MapField     `protobuf:"bytes,7,rep,name=result_map,json=resultMap,proto3" json:"result_map,omitempty"`
	Feature              []*FeatureField `protobuf:"bytes,8,rep,name=feature,proto3" json:"feature,omitempty"`
	Tenant               string          `protobuf:"bytes,9,opt,name=tenant,proto3" json:"tenant,omitempty"`                                                 // Used for communicating the tenant to the main program
	TenantId             string          `protobuf:"bytes,10,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                            // Used for communicating the tenant-ID to the main program
	OnnxVersionMajor     int32           `protobuf:"varint,11,opt,name=onnx_version_major,json=onnxVersionMajor,proto3" json:"onnx_version_major,omitempty"` // Used for communicating the network onnx version to the main program
	OnnxVersionMinor     int32           `protobuf:"varint,12,opt,name=onnx_version_minor,json=onnxVersionMinor,proto3" json:"onnx_version_minor,omitempty"` // Used for communicating the network onnx version to the main program
	FeatureUid           string          `protobuf:"bytes,13,opt,name=feature_uid,json=featureUid,proto3" json:"feature_uid,omitempty"`
}

func (x *ResultField) Reset() {
	*x = ResultField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultField) ProtoMessage() {}

func (x *ResultField) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultField.ProtoReflect.Descriptor instead.
func (*ResultField) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{8}
}

func (x *ResultField) GetModelLabel() string {
	if x != nil {
		return x.ModelLabel
	}
	return ""
}

func (x *ResultField) GetModelTag() string {
	if x != nil {
		return x.ModelTag
	}
	return ""
}

func (x *ResultField) GetModelId() int32 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *ResultField) GetClassifier() float64 {
	if x != nil {
		return x.Classifier
	}
	return 0
}

func (x *ResultField) GetEvaluationTimeMs() float64 {
	if x != nil {
		return x.EvaluationTimeMs
	}
	return 0
}

func (x *ResultField) GetPostProcessingTimeMs() float64 {
	if x != nil {
		return x.PostProcessingTimeMs
	}
	return 0
}

func (x *ResultField) GetResultMap() []*MapField {
	if x != nil {
		return x.ResultMap
	}
	return nil
}

func (x *ResultField) GetFeature() []*FeatureField {
	if x != nil {
		return x.Feature
	}
	return nil
}

func (x *ResultField) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *ResultField) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ResultField) GetOnnxVersionMajor() int32 {
	if x != nil {
		return x.OnnxVersionMajor
	}
	return 0
}

func (x *ResultField) GetOnnxVersionMinor() int32 {
	if x != nil {
		return x.OnnxVersionMinor
	}
	return 0
}

func (x *ResultField) GetFeatureUid() string {
	if x != nil {
		return x.FeatureUid
	}
	return ""
}

type Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageClass          int32  `protobuf:"varint,1,opt,name=image_class,json=imageClass,proto3" json:"image_class,omitempty"`
	ClassCode           string `protobuf:"bytes,2,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`
	MostRelevantDefect  string `protobuf:"bytes,3,opt,name=most_relevant_defect,json=mostRelevantDefect,proto3" json:"most_relevant_defect,omitempty"`
	RelevantDefectsJson string `protobuf:"bytes,4,opt,name=relevant_defects_json,json=relevantDefectsJson,proto3" json:"relevant_defects_json,omitempty"`
	FeatureTableJson    string `protobuf:"bytes,5,opt,name=feature_table_json,json=featureTableJson,proto3" json:"feature_table_json,omitempty"`
}

func (x *Summary) Reset() {
	*x = Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary) ProtoMessage() {}

func (x *Summary) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary.ProtoReflect.Descriptor instead.
func (*Summary) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{9}
}

func (x *Summary) GetImageClass() int32 {
	if x != nil {
		return x.ImageClass
	}
	return 0
}

func (x *Summary) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Summary) GetMostRelevantDefect() string {
	if x != nil {
		return x.MostRelevantDefect
	}
	return ""
}

func (x *Summary) GetRelevantDefectsJson() string {
	if x != nil {
		return x.RelevantDefectsJson
	}
	return ""
}

func (x *Summary) GetFeatureTableJson() string {
	if x != nil {
		return x.FeatureTableJson
	}
	return ""
}

type FeatureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureUid  string `protobuf:"bytes,1,opt,name=feature_uid,json=featureUid,proto3" json:"feature_uid,omitempty"`
	FeatureName string `protobuf:"bytes,2,opt,name=feature_name,json=featureName,proto3" json:"feature_name,omitempty"`
}

func (x *FeatureInfo) Reset() {
	*x = FeatureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureInfo) ProtoMessage() {}

func (x *FeatureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureInfo.ProtoReflect.Descriptor instead.
func (*FeatureInfo) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{10}
}

func (x *FeatureInfo) GetFeatureUid() string {
	if x != nil {
		return x.FeatureUid
	}
	return ""
}

func (x *FeatureInfo) GetFeatureName() string {
	if x != nil {
		return x.FeatureName
	}
	return ""
}

type ModelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelUid         string          `protobuf:"bytes,1,opt,name=model_uid,json=modelUid,proto3" json:"model_uid,omitempty"`
	ModelName        string          `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	Features         []*FeatureInfo  `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
	Tenant           string          `protobuf:"bytes,4,opt,name=tenant,proto3" json:"tenant,omitempty"`
	TenantUid        string          `protobuf:"bytes,5,opt,name=tenant_uid,json=tenantUid,proto3" json:"tenant_uid,omitempty"`
	OnnxVersionMajor int32           `protobuf:"varint,6,opt,name=onnx_version_major,json=onnxVersionMajor,proto3" json:"onnx_version_major,omitempty"` // Used for communicating the network onnx version to the main program
	OnnxVersionMinor int32           `protobuf:"varint,7,opt,name=onnx_version_minor,json=onnxVersionMinor,proto3" json:"onnx_version_minor,omitempty"` // Used for communicating the network onnx version to the main program
	ModelType        ModelType       `protobuf:"varint,8,opt,name=model_type,json=modelType,proto3,enum=results.ModelType" json:"model_type,omitempty"`
	ModelOutputType  ModelOutputType `protobuf:"varint,9,opt,name=model_output_type,json=modelOutputType,proto3,enum=results.ModelOutputType" json:"model_output_type,omitempty"`
}

func (x *ModelInfo) Reset() {
	*x = ModelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInfo) ProtoMessage() {}

func (x *ModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInfo.ProtoReflect.Descriptor instead.
func (*ModelInfo) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{11}
}

func (x *ModelInfo) GetModelUid() string {
	if x != nil {
		return x.ModelUid
	}
	return ""
}

func (x *ModelInfo) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *ModelInfo) GetFeatures() []*FeatureInfo {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *ModelInfo) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *ModelInfo) GetTenantUid() string {
	if x != nil {
		return x.TenantUid
	}
	return ""
}

func (x *ModelInfo) GetOnnxVersionMajor() int32 {
	if x != nil {
		return x.OnnxVersionMajor
	}
	return 0
}

func (x *ModelInfo) GetOnnxVersionMinor() int32 {
	if x != nil {
		return x.OnnxVersionMinor
	}
	return 0
}

func (x *ModelInfo) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_REGULAR
}

func (x *ModelInfo) GetModelOutputType() ModelOutputType {
	if x != nil {
		return x.ModelOutputType
	}
	return ModelOutputType_TYPE_UNKNOWN
}

type Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output             []*ResultField `protobuf:"bytes,1,rep,name=output,proto3" json:"output,omitempty"`
	OriginalImageW     int32          `protobuf:"varint,2,opt,name=original_image_w,json=originalImageW,proto3" json:"original_image_w,omitempty"`
	OriginalImageH     int32          `protobuf:"varint,3,opt,name=original_image_h,json=originalImageH,proto3" json:"original_image_h,omitempty"`
	OriginalImageC     int32          `protobuf:"varint,4,opt,name=original_image_c,json=originalImageC,proto3" json:"original_image_c,omitempty"`
	OriginalImageWMm   float64        `protobuf:"fixed64,5,opt,name=original_image_w_mm,json=originalImageWMm,proto3" json:"original_image_w_mm,omitempty"`
	OriginalImageHMm   float64        `protobuf:"fixed64,6,opt,name=original_image_h_mm,json=originalImageHMm,proto3" json:"original_image_h_mm,omitempty"`
	OriginalImageCMm   float64        `protobuf:"fixed64,7,opt,name=original_image_c_mm,json=originalImageCMm,proto3" json:"original_image_c_mm,omitempty"`
	MeanGrayActiveArea float64        `protobuf:"fixed64,8,opt,name=mean_gray_active_area,json=meanGrayActiveArea,proto3" json:"mean_gray_active_area,omitempty"`
	ResultSummary      *Summary       `protobuf:"bytes,9,opt,name=result_summary,json=resultSummary,proto3" json:"result_summary,omitempty"`
	MinGrayActiveArea  float64        `protobuf:"fixed64,10,opt,name=min_gray_active_area,json=minGrayActiveArea,proto3" json:"min_gray_active_area,omitempty"`
	MaxGrayActiveArea  float64        `protobuf:"fixed64,11,opt,name=max_gray_active_area,json=maxGrayActiveArea,proto3" json:"max_gray_active_area,omitempty"`
	AvailableModels    []*ModelInfo   `protobuf:"bytes,12,rep,name=available_models,json=availableModels,proto3" json:"available_models,omitempty"` // Used for communicating the available models to the main program
}

func (x *Results) Reset() {
	*x = Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Results) ProtoMessage() {}

func (x *Results) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Results.ProtoReflect.Descriptor instead.
func (*Results) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{12}
}

func (x *Results) GetOutput() []*ResultField {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *Results) GetOriginalImageW() int32 {
	if x != nil {
		return x.OriginalImageW
	}
	return 0
}

func (x *Results) GetOriginalImageH() int32 {
	if x != nil {
		return x.OriginalImageH
	}
	return 0
}

func (x *Results) GetOriginalImageC() int32 {
	if x != nil {
		return x.OriginalImageC
	}
	return 0
}

func (x *Results) GetOriginalImageWMm() float64 {
	if x != nil {
		return x.OriginalImageWMm
	}
	return 0
}

func (x *Results) GetOriginalImageHMm() float64 {
	if x != nil {
		return x.OriginalImageHMm
	}
	return 0
}

func (x *Results) GetOriginalImageCMm() float64 {
	if x != nil {
		return x.OriginalImageCMm
	}
	return 0
}

func (x *Results) GetMeanGrayActiveArea() float64 {
	if x != nil {
		return x.MeanGrayActiveArea
	}
	return 0
}

func (x *Results) GetResultSummary() *Summary {
	if x != nil {
		return x.ResultSummary
	}
	return nil
}

func (x *Results) GetMinGrayActiveArea() float64 {
	if x != nil {
		return x.MinGrayActiveArea
	}
	return 0
}

func (x *Results) GetMaxGrayActiveArea() float64 {
	if x != nil {
		return x.MaxGrayActiveArea
	}
	return 0
}

func (x *Results) GetAvailableModels() []*ModelInfo {
	if x != nil {
		return x.AvailableModels
	}
	return nil
}

// deprecated
type ModelOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deactivated              bool    `protobuf:"varint,1,opt,name=deactivated,proto3" json:"deactivated,omitempty"`
	MinSegmentationThreshold float64 `protobuf:"fixed64,2,opt,name=minSegmentationThreshold,proto3" json:"minSegmentationThreshold,omitempty"`
	MinGrayValue             float64 `protobuf:"fixed64,3,opt,name=minGrayValue,proto3" json:"minGrayValue,omitempty"`
	MaxGrayValue             float64 `protobuf:"fixed64,4,opt,name=maxGrayValue,proto3" json:"maxGrayValue,omitempty"`
	MaxMeanGrayValue         float64 `protobuf:"fixed64,5,opt,name=maxMeanGrayValue,proto3" json:"maxMeanGrayValue,omitempty"`
	MinProbability           float64 `protobuf:"fixed64,6,opt,name=minProbability,proto3" json:"minProbability,omitempty"`
	MinLength                float64 `protobuf:"fixed64,7,opt,name=minLength,proto3" json:"minLength,omitempty"`
	MinWidth                 float64 `protobuf:"fixed64,8,opt,name=minWidth,proto3" json:"minWidth,omitempty"`
	MinHeight                float64 `protobuf:"fixed64,9,opt,name=minHeight,proto3" json:"minHeight,omitempty"`
	MinArea                  float64 `protobuf:"fixed64,10,opt,name=minArea,proto3" json:"minArea,omitempty"`
	MinImageClassifier       float64 `protobuf:"fixed64,11,opt,name=minImageClassifier,proto3" json:"minImageClassifier,omitempty"`
	DeepGrayLevel            float64 `protobuf:"fixed64,12,opt,name=deepGrayLevel,proto3" json:"deepGrayLevel,omitempty"`
	Priority                 int32   `protobuf:"varint,13,opt,name=priority,proto3" json:"priority,omitempty"`
	OnlyBoundingBoxes        bool    `protobuf:"varint,14,opt,name=onlyBoundingBoxes,proto3" json:"onlyBoundingBoxes,omitempty"`
}

func (x *ModelOptions) Reset() {
	*x = ModelOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelOptions) ProtoMessage() {}

func (x *ModelOptions) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelOptions.ProtoReflect.Descriptor instead.
func (*ModelOptions) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{13}
}

func (x *ModelOptions) GetDeactivated() bool {
	if x != nil {
		return x.Deactivated
	}
	return false
}

func (x *ModelOptions) GetMinSegmentationThreshold() float64 {
	if x != nil {
		return x.MinSegmentationThreshold
	}
	return 0
}

func (x *ModelOptions) GetMinGrayValue() float64 {
	if x != nil {
		return x.MinGrayValue
	}
	return 0
}

func (x *ModelOptions) GetMaxGrayValue() float64 {
	if x != nil {
		return x.MaxGrayValue
	}
	return 0
}

func (x *ModelOptions) GetMaxMeanGrayValue() float64 {
	if x != nil {
		return x.MaxMeanGrayValue
	}
	return 0
}

func (x *ModelOptions) GetMinProbability() float64 {
	if x != nil {
		return x.MinProbability
	}
	return 0
}

func (x *ModelOptions) GetMinLength() float64 {
	if x != nil {
		return x.MinLength
	}
	return 0
}

func (x *ModelOptions) GetMinWidth() float64 {
	if x != nil {
		return x.MinWidth
	}
	return 0
}

func (x *ModelOptions) GetMinHeight() float64 {
	if x != nil {
		return x.MinHeight
	}
	return 0
}

func (x *ModelOptions) GetMinArea() float64 {
	if x != nil {
		return x.MinArea
	}
	return 0
}

func (x *ModelOptions) GetMinImageClassifier() float64 {
	if x != nil {
		return x.MinImageClassifier
	}
	return 0
}

func (x *ModelOptions) GetDeepGrayLevel() float64 {
	if x != nil {
		return x.DeepGrayLevel
	}
	return 0
}

func (x *ModelOptions) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ModelOptions) GetOnlyBoundingBoxes() bool {
	if x != nil {
		return x.OnlyBoundingBoxes
	}
	return false
}

// deprecated
type OptionContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options               map[int32]*ModelOptions `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // maps the model_id to the options
	DivisorW              int32                   `protobuf:"varint,2,opt,name=divisor_w,json=divisorW,proto3" json:"divisor_w,omitempty"`
	DivisorH              int32                   `protobuf:"varint,3,opt,name=divisor_h,json=divisorH,proto3" json:"divisor_h,omitempty"`
	BatchSize             int32                   `protobuf:"varint,4,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	NetworkImgPrescalingW int32                   `protobuf:"varint,5,opt,name=network_img_prescaling_w,json=networkImgPrescalingW,proto3" json:"network_img_prescaling_w,omitempty"`
	NetworkImgPrescalingH int32                   `protobuf:"varint,6,opt,name=network_img_prescaling_h,json=networkImgPrescalingH,proto3" json:"network_img_prescaling_h,omitempty"`
	NetworkImgPrescalingC int32                   `protobuf:"varint,7,opt,name=network_img_prescaling_c,json=networkImgPrescalingC,proto3" json:"network_img_prescaling_c,omitempty"`
	BorderW               int32                   `protobuf:"varint,8,opt,name=border_w,json=borderW,proto3" json:"border_w,omitempty"`
	BorderH               int32                   `protobuf:"varint,9,opt,name=border_h,json=borderH,proto3" json:"border_h,omitempty"`
	BorderWR              int32                   `protobuf:"varint,10,opt,name=border_w_r,json=borderWR,proto3" json:"border_w_r,omitempty"`
	BorderHB              int32                   `protobuf:"varint,11,opt,name=border_h_b,json=borderHB,proto3" json:"border_h_b,omitempty"`
	CellsW                int32                   `protobuf:"varint,12,opt,name=cells_w,json=cellsW,proto3" json:"cells_w,omitempty"`
	CellsH                int32                   `protobuf:"varint,13,opt,name=cells_h,json=cellsH,proto3" json:"cells_h,omitempty"`
}

func (x *OptionContainer) Reset() {
	*x = OptionContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionContainer) ProtoMessage() {}

func (x *OptionContainer) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionContainer.ProtoReflect.Descriptor instead.
func (*OptionContainer) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{14}
}

func (x *OptionContainer) GetOptions() map[int32]*ModelOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *OptionContainer) GetDivisorW() int32 {
	if x != nil {
		return x.DivisorW
	}
	return 0
}

func (x *OptionContainer) GetDivisorH() int32 {
	if x != nil {
		return x.DivisorH
	}
	return 0
}

func (x *OptionContainer) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *OptionContainer) GetNetworkImgPrescalingW() int32 {
	if x != nil {
		return x.NetworkImgPrescalingW
	}
	return 0
}

func (x *OptionContainer) GetNetworkImgPrescalingH() int32 {
	if x != nil {
		return x.NetworkImgPrescalingH
	}
	return 0
}

func (x *OptionContainer) GetNetworkImgPrescalingC() int32 {
	if x != nil {
		return x.NetworkImgPrescalingC
	}
	return 0
}

func (x *OptionContainer) GetBorderW() int32 {
	if x != nil {
		return x.BorderW
	}
	return 0
}

func (x *OptionContainer) GetBorderH() int32 {
	if x != nil {
		return x.BorderH
	}
	return 0
}

func (x *OptionContainer) GetBorderWR() int32 {
	if x != nil {
		return x.BorderWR
	}
	return 0
}

func (x *OptionContainer) GetBorderHB() int32 {
	if x != nil {
		return x.BorderHB
	}
	return 0
}

func (x *OptionContainer) GetCellsW() int32 {
	if x != nil {
		return x.CellsW
	}
	return 0
}

func (x *OptionContainer) GetCellsH() int32 {
	if x != nil {
		return x.CellsH
	}
	return 0
}

// CPUs will only have their type and id set
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId                   int32      `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Type                       DeviceType `protobuf:"varint,2,opt,name=type,proto3,enum=results.DeviceType" json:"type,omitempty"`
	Name                       string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	MemorySize                 int64      `protobuf:"varint,4,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"` // available GPU memory in bytes
	Integrated                 bool       `protobuf:"varint,5,opt,name=integrated,proto3" json:"integrated,omitempty"`                   // whether the GPU is integrated
	CudaUuid                   string     `protobuf:"bytes,6,opt,name=cuda_uuid,json=cudaUuid,proto3" json:"cuda_uuid,omitempty"`
	CudaComputeCapabilityMajor int32      `protobuf:"varint,7,opt,name=cuda_compute_capability_major,json=cudaComputeCapabilityMajor,proto3" json:"cuda_compute_capability_major,omitempty"`
	CudaComputeCapabilityMinor int32      `protobuf:"varint,8,opt,name=cuda_compute_capability_minor,json=cudaComputeCapabilityMinor,proto3" json:"cuda_compute_capability_minor,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{15}
}

func (x *Device) GetDeviceId() int32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *Device) GetType() DeviceType {
	if x != nil {
		return x.Type
	}
	return DeviceType_UNDEFINED
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetMemorySize() int64 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

func (x *Device) GetIntegrated() bool {
	if x != nil {
		return x.Integrated
	}
	return false
}

func (x *Device) GetCudaUuid() string {
	if x != nil {
		return x.CudaUuid
	}
	return ""
}

func (x *Device) GetCudaComputeCapabilityMajor() int32 {
	if x != nil {
		return x.CudaComputeCapabilityMajor
	}
	return 0
}

func (x *Device) GetCudaComputeCapabilityMinor() int32 {
	if x != nil {
		return x.CudaComputeCapabilityMinor
	}
	return 0
}

type DeviceInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device []*Device `protobuf:"bytes,1,rep,name=device,proto3" json:"device,omitempty"`
}

func (x *DeviceInformation) Reset() {
	*x = DeviceInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_results_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInformation) ProtoMessage() {}

func (x *DeviceInformation) ProtoReflect() protoreflect.Message {
	mi := &file_results_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInformation.ProtoReflect.Descriptor instead.
func (*DeviceInformation) Descriptor() ([]byte, []int) {
	return file_results_proto_rawDescGZIP(), []int{16}
}

func (x *DeviceInformation) GetDevice() []*Device {
	if x != nil {
		return x.Device
	}
	return nil
}

var File_results_proto protoreflect.FileDescriptor

var file_results_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x66,
	0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x70, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x4f, 0x66, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x69, 0x64, 0x22, 0x56, 0x0a,
	0x06, 0x52, 0x6f, 0x77, 0x52, 0x4c, 0x43, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x58, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x59, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x4e, 0x0a, 0x0c, 0x4f, 0x63, 0x72, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x52, 0x0a, 0x14, 0x4f, 0x63, 0x72, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x0d, 0x6f, 0x63, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x4f,
	0x63, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x6f, 0x63, 0x72,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x22, 0x23, 0x0a, 0x05, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x22, 0x8e,
	0x01, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x58,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x59, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x22,
	0xf6, 0x06, 0x0a, 0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x72, 0x65, 0x63, 0x74, 0x58, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x63, 0x74, 0x59, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x72, 0x65, 0x63, 0x74, 0x57, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x63, 0x74, 0x48, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x61, 0x72,
	0x65, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x61, 0x6e, 0x47, 0x72, 0x61, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f,
	0x67, 0x72, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x47,
	0x72, 0x61, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x3b, 0x0a, 0x0d,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x44, 0x65,
	0x66, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x70, 0x73, 0x57, 0x69, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x74, 0x5f, 0x78, 0x5f, 0x6d, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x74, 0x58, 0x4d, 0x6d, 0x12, 0x1a, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x79, 0x5f,
	0x6d, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x65, 0x63, 0x74, 0x59, 0x4d,
	0x6d, 0x12, 0x1a, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x77, 0x5f, 0x6d, 0x6d, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x65, 0x63, 0x74, 0x57, 0x4d, 0x6d, 0x12, 0x1a, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x68, 0x5f, 0x6d, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x74, 0x48, 0x4d, 0x6d, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x6f, 0x77,
	0x5f, 0x72, 0x6c, 0x63, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x4c, 0x43, 0x52, 0x06, 0x72, 0x6f, 0x77,
	0x52, 0x6c, 0x63, 0x12, 0x53, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x4f, 0x63,
	0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x14, 0x6f, 0x63, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x42, 0x6f, 0x78, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x4b, 0x0a, 0x1a, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x17, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x61, 0x6c, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x77, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x91, 0x02, 0x0a, 0x08, 0x4d, 0x61, 0x70,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x68, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x4d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x57,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x43, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x04, 0x0a,
	0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x2f, 0x0a, 0x07,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x6e, 0x6e, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x6f, 0x6e, 0x6e, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6a, 0x6f, 0x72,
	0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x6e, 0x6e, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x6e,
	0x6e, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x69, 0x64, 0x22,
	0xdd, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d,
	0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66,
	0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x73, 0x4a, 0x73, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x22,
	0x51, 0x0a, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x85, 0x03, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x08,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x6e, 0x6e, 0x78, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x6f, 0x6e, 0x6e, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x6a, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x6e, 0x6e, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x6f, 0x6e, 0x6e, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x6f,
	0x72, 0x12, 0x31, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xcf, 0x04, 0x0a, 0x07, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x12, 0x28,
	0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x43, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x5f, 0x6d, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x4d,
	0x6d, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x68, 0x5f, 0x6d, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x4d, 0x6d,
	0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x5f, 0x6d, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x4d, 0x6d, 0x12,
	0x31, 0x0a, 0x15, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x6d, 0x65, 0x61, 0x6e, 0x47, 0x72, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x37, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x6d,
	0x69, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x47, 0x72,
	0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x2f, 0x0a, 0x14,
	0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x47,
	0x72, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x3d, 0x0a,
	0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0x9a, 0x04, 0x0a,
	0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x3a, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x69, 0x6e, 0x47, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x61, 0x6e, 0x47, 0x72,
	0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d,
	0x61, 0x78, 0x4d, 0x65, 0x61, 0x6e, 0x47, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x69, 0x6e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x65,
	0x70, 0x47, 0x72, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x64, 0x65, 0x65, 0x70, 0x47, 0x72, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6f,
	0x6e, 0x6c, 0x79, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x65, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x65, 0x73, 0x22, 0xcd, 0x04, 0x0a, 0x0f, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x3f, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x69, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x57, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x69, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x48, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6d, 0x67, 0x50, 0x72, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x57,
	0x12, 0x37, 0x0a, 0x18, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6d, 0x67, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6d, 0x67, 0x50, 0x72,
	0x65, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6d, 0x67, 0x50, 0x72, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x43, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x77, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x12, 0x1c, 0x0a, 0x0a, 0x62, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x77, 0x5f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x57, 0x52, 0x12, 0x1c, 0x0a, 0x0a, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x68, 0x5f, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x48, 0x42, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x77, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x57, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x48, 0x1a, 0x51, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x02, 0x0a, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x75, 0x64, 0x61, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x64, 0x61, 0x55, 0x75, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1d,
	0x63, 0x75, 0x64, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1a, 0x63, 0x75, 0x64, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12,
	0x41, 0x0a, 0x1d, 0x63, 0x75, 0x64, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x63, 0x75, 0x64, 0x61, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x69, 0x6e,
	0x6f, 0x72, 0x22, 0x3c, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2a, 0xca, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x4d, 0x41, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x4d, 0x41, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x4d, 0x41, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4d,
	0x41, 0x50, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41,
	0x50, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41,
	0x50, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41,
	0x50, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41,
	0x50, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x38, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41,
	0x50, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x31, 0x36, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x41, 0x50, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x33, 0x32, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x41, 0x50, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x36, 0x34, 0x10, 0x0b, 0x2a, 0x2d, 0x0a,
	0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45,
	0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52, 0x45, 0x41, 0x5f,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0xd2, 0x01, 0x0a,
	0x0f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x4f, 0x4d, 0x41, 0x4c, 0x59, 0x5f, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43,
	0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x06, 0x2a, 0x2d, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x43, 0x50, 0x55, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x10, 0x02,
	0x42, 0x2b, 0x5a, 0x14, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f,
	0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0xaa, 0x02, 0x12, 0x44, 0x45, 0x4e, 0x4b, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_results_proto_rawDescOnce sync.Once
	file_results_proto_rawDescData = file_results_proto_rawDesc
)

func file_results_proto_rawDescGZIP() []byte {
	file_results_proto_rawDescOnce.Do(func() {
		file_results_proto_rawDescData = protoimpl.X.CompressGZIP(file_results_proto_rawDescData)
	})
	return file_results_proto_rawDescData
}

var file_results_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_results_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_results_proto_goTypes = []interface{}{
	(MapDataType)(0),             // 0: results.MapDataType
	(ModelType)(0),               // 1: results.ModelType
	(ModelOutputType)(0),         // 2: results.ModelOutputType
	(DeviceType)(0),              // 3: results.DeviceType
	(*DefectAddress)(nil),        // 4: results.DefectAddress
	(*RowRLC)(nil),               // 5: results.RowRLC
	(*OcrCharacter)(nil),         // 6: results.OcrCharacter
	(*OcrCharacterPosition)(nil), // 7: results.OcrCharacterPosition
	(*Point)(nil),                // 8: results.Point
	(*MinimalBoundingBox)(nil),   // 9: results.MinimalBoundingBox
	(*FeatureField)(nil),         // 10: results.FeatureField
	(*MapField)(nil),             // 11: results.MapField
	(*ResultField)(nil),          // 12: results.ResultField
	(*Summary)(nil),              // 13: results.Summary
	(*FeatureInfo)(nil),          // 14: results.FeatureInfo
	(*ModelInfo)(nil),            // 15: results.ModelInfo
	(*Results)(nil),              // 16: results.Results
	(*ModelOptions)(nil),         // 17: results.ModelOptions
	(*OptionContainer)(nil),      // 18: results.OptionContainer
	(*Device)(nil),               // 19: results.Device
	(*DeviceInformation)(nil),    // 20: results.DeviceInformation
	nil,                          // 21: results.OptionContainer.OptionsEntry
}
var file_results_proto_depIdxs = []int32{
	6,  // 0: results.OcrCharacterPosition.ocr_character:type_name -> results.OcrCharacter
	4,  // 1: results.FeatureField.overlaps_with:type_name -> results.DefectAddress
	5,  // 2: results.FeatureField.row_rlc:type_name -> results.RowRLC
	7,  // 3: results.FeatureField.ocr_character_position:type_name -> results.OcrCharacterPosition
	9,  // 4: results.FeatureField.minimal_bounding_box:type_name -> results.MinimalBoundingBox
	8,  // 5: results.FeatureField.minimal_bounding_box_point:type_name -> results.Point
	0,  // 6: results.MapField.datatype:type_name -> results.MapDataType
	11, // 7: results.ResultField.result_map:type_name -> results.MapField
	10, // 8: results.ResultField.feature:type_name -> results.FeatureField
	14, // 9: results.ModelInfo.features:type_name -> results.FeatureInfo
	1,  // 10: results.ModelInfo.model_type:type_name -> results.ModelType
	2,  // 11: results.ModelInfo.model_output_type:type_name -> results.ModelOutputType
	12, // 12: results.Results.output:type_name -> results.ResultField
	13, // 13: results.Results.result_summary:type_name -> results.Summary
	15, // 14: results.Results.available_models:type_name -> results.ModelInfo
	21, // 15: results.OptionContainer.options:type_name -> results.OptionContainer.OptionsEntry
	3,  // 16: results.Device.type:type_name -> results.DeviceType
	19, // 17: results.DeviceInformation.device:type_name -> results.Device
	17, // 18: results.OptionContainer.OptionsEntry.value:type_name -> results.ModelOptions
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_results_proto_init() }
func file_results_proto_init() {
	if File_results_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_results_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefectAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowRLC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OcrCharacter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OcrCharacterPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinimalBoundingBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_results_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_results_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_results_proto_goTypes,
		DependencyIndexes: file_results_proto_depIdxs,
		EnumInfos:         file_results_proto_enumTypes,
		MessageInfos:      file_results_proto_msgTypes,
	}.Build()
	File_results_proto = out.File
	file_results_proto_rawDesc = nil
	file_results_proto_goTypes = nil
	file_results_proto_depIdxs = nil
}
