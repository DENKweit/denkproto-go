// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v5.26.0
// source: DENKbuffer.proto

package denkbuffer

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ImageTypes int32

const (
	// Image.data contains raw uint8 values. Image can be reconstructed by using Image.width, Image.height, Image.channels
	ImageTypes_Raw ImageTypes = 0
	// Image.data contains JPEG encoded image
	ImageTypes_JPEG ImageTypes = 1
	// Image.data contains PNG encoded image
	ImageTypes_PNG ImageTypes = 2
)

// Enum value maps for ImageTypes.
var (
	ImageTypes_name = map[int32]string{
		0: "Raw",
		1: "JPEG",
		2: "PNG",
	}
	ImageTypes_value = map[string]int32{
		"Raw":  0,
		"JPEG": 1,
		"PNG":  2,
	}
)

func (x ImageTypes) Enum() *ImageTypes {
	p := new(ImageTypes)
	*p = x
	return p
}

func (x ImageTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_DENKbuffer_proto_enumTypes[0].Descriptor()
}

func (ImageTypes) Type() protoreflect.EnumType {
	return &file_DENKbuffer_proto_enumTypes[0]
}

func (x ImageTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageTypes.Descriptor instead.
func (ImageTypes) EnumDescriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{0}
}

type ComputedPropertySubjects int32

const (
	ComputedPropertySubjects_COMPUTED_PROPERTY_SUBJECT_MEAN_GRAY_VALUE ComputedPropertySubjects = 0
)

// Enum value maps for ComputedPropertySubjects.
var (
	ComputedPropertySubjects_name = map[int32]string{
		0: "COMPUTED_PROPERTY_SUBJECT_MEAN_GRAY_VALUE",
	}
	ComputedPropertySubjects_value = map[string]int32{
		"COMPUTED_PROPERTY_SUBJECT_MEAN_GRAY_VALUE": 0,
	}
)

func (x ComputedPropertySubjects) Enum() *ComputedPropertySubjects {
	p := new(ComputedPropertySubjects)
	*p = x
	return p
}

func (x ComputedPropertySubjects) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComputedPropertySubjects) Descriptor() protoreflect.EnumDescriptor {
	return file_DENKbuffer_proto_enumTypes[1].Descriptor()
}

func (ComputedPropertySubjects) Type() protoreflect.EnumType {
	return &file_DENKbuffer_proto_enumTypes[1]
}

func (x ComputedPropertySubjects) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComputedPropertySubjects.Descriptor instead.
func (ComputedPropertySubjects) EnumDescriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{1}
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Image output id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Encoded Image
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// H height
	Height int32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	// W width
	Width int32 `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
	// C channels [1-3]
	Channels int32 `protobuf:"varint,5,opt,name=channels,proto3" json:"channels,omitempty"`
	// filename (optional)
	Filename string `protobuf:"bytes,6,opt,name=filename,proto3" json:"filename,omitempty"`
	// Image type
	ImageType ImageTypes `protobuf:"varint,7,opt,name=imageType,proto3,enum=denkproto.ImageTypes" json:"imageType,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{0}
}

func (x *Image) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Image) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Image) GetChannels() int32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *Image) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Image) GetImageType() ImageTypes {
	if x != nil {
		return x.ImageType
	}
	return ImageTypes_Raw
}

type FloatMapChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid of the associated class
	ClassLabelId string `protobuf:"bytes,1,opt,name=class_label_id,json=classLabelId,proto3" json:"class_label_id,omitempty"`
	// data. H x W float
	Data []float32 `protobuf:"fixed32,2,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *FloatMapChannel) Reset() {
	*x = FloatMapChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatMapChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatMapChannel) ProtoMessage() {}

func (x *FloatMapChannel) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatMapChannel.ProtoReflect.Descriptor instead.
func (*FloatMapChannel) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{1}
}

func (x *FloatMapChannel) GetClassLabelId() string {
	if x != nil {
		return x.ClassLabelId
	}
	return ""
}

func (x *FloatMapChannel) GetData() []float32 {
	if x != nil {
		return x.Data
	}
	return nil
}

// AnomalyDetection: 1xHxW
// Segmentation: CxHxW
type FloatMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// each channel contains H x W images, 0-1 float values.
	// Should be color-mapped to for visualization.
	Channels []*FloatMapChannel `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	// H height
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// W width
	Width int32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *FloatMap) Reset() {
	*x = FloatMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatMap) ProtoMessage() {}

func (x *FloatMap) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatMap.ProtoReflect.Descriptor instead.
func (*FloatMap) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{2}
}

func (x *FloatMap) GetChannels() []*FloatMapChannel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *FloatMap) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *FloatMap) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

type ClassificationAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassLabelId string `protobuf:"bytes,1,opt,name=class_label_id,json=classLabelId,proto3" json:"class_label_id,omitempty"` // uuid of the associated class
	Value        bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`                                    // true when class is present on image, false if not
}

func (x *ClassificationAnnotation) Reset() {
	*x = ClassificationAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassificationAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassificationAnnotation) ProtoMessage() {}

func (x *ClassificationAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassificationAnnotation.ProtoReflect.Descriptor instead.
func (*ClassificationAnnotation) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{3}
}

func (x *ClassificationAnnotation) GetClassLabelId() string {
	if x != nil {
		return x.ClassLabelId
	}
	return ""
}

func (x *ClassificationAnnotation) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type ClassificationPrediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassLabelId string  `protobuf:"bytes,1,opt,name=class_label_id,json=classLabelId,proto3" json:"class_label_id,omitempty"` // uuid of the associated class
	Score        float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`                                   // score [0, 1]
}

func (x *ClassificationPrediction) Reset() {
	*x = ClassificationPrediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassificationPrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassificationPrediction) ProtoMessage() {}

func (x *ClassificationPrediction) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassificationPrediction.ProtoReflect.Descriptor instead.
func (*ClassificationPrediction) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{4}
}

func (x *ClassificationPrediction) GetClassLabelId() string {
	if x != nil {
		return x.ClassLabelId
	}
	return ""
}

func (x *ClassificationPrediction) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type BoundingBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// top left x [0, 1]
	X1 float64 `protobuf:"fixed64,1,opt,name=x1,proto3" json:"x1,omitempty"`
	// bottom right x [0, 1]
	X2 float64 `protobuf:"fixed64,2,opt,name=x2,proto3" json:"x2,omitempty"`
	// top left y [0, 1]
	Y1 float64 `protobuf:"fixed64,3,opt,name=y1,proto3" json:"y1,omitempty"`
	// bottom right y [0, 1]
	Y2 float64 `protobuf:"fixed64,4,opt,name=y2,proto3" json:"y2,omitempty"`
}

func (x *BoundingBox) Reset() {
	*x = BoundingBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoundingBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundingBox) ProtoMessage() {}

func (x *BoundingBox) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundingBox.ProtoReflect.Descriptor instead.
func (*BoundingBox) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{5}
}

func (x *BoundingBox) GetX1() float64 {
	if x != nil {
		return x.X1
	}
	return 0
}

func (x *BoundingBox) GetX2() float64 {
	if x != nil {
		return x.X2
	}
	return 0
}

func (x *BoundingBox) GetY1() float64 {
	if x != nil {
		return x.Y1
	}
	return 0
}

func (x *BoundingBox) GetY2() float64 {
	if x != nil {
		return x.Y2
	}
	return 0
}

type ObjectDetectionPrediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid of the associated class
	ClassLabelId string `protobuf:"bytes,1,opt,name=class_label_id,json=classLabelId,proto3" json:"class_label_id,omitempty"`
	// score of the detected object
	Score float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	// bounding box
	Box *BoundingBox `protobuf:"bytes,3,opt,name=box,proto3" json:"box,omitempty"`
}

func (x *ObjectDetectionPrediction) Reset() {
	*x = ObjectDetectionPrediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectDetectionPrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDetectionPrediction) ProtoMessage() {}

func (x *ObjectDetectionPrediction) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDetectionPrediction.ProtoReflect.Descriptor instead.
func (*ObjectDetectionPrediction) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{6}
}

func (x *ObjectDetectionPrediction) GetClassLabelId() string {
	if x != nil {
		return x.ClassLabelId
	}
	return ""
}

func (x *ObjectDetectionPrediction) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ObjectDetectionPrediction) GetBox() *BoundingBox {
	if x != nil {
		return x.Box
	}
	return nil
}

type ObjectDetectionAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid of the associated class
	ClassLabelId string `protobuf:"bytes,1,opt,name=class_label_id,json=classLabelId,proto3" json:"class_label_id,omitempty"`
	// bounding box
	Box *BoundingBox `protobuf:"bytes,2,opt,name=box,proto3" json:"box,omitempty"`
}

func (x *ObjectDetectionAnnotation) Reset() {
	*x = ObjectDetectionAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectDetectionAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDetectionAnnotation) ProtoMessage() {}

func (x *ObjectDetectionAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDetectionAnnotation.ProtoReflect.Descriptor instead.
func (*ObjectDetectionAnnotation) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{7}
}

func (x *ObjectDetectionAnnotation) GetClassLabelId() string {
	if x != nil {
		return x.ClassLabelId
	}
	return ""
}

func (x *ObjectDetectionAnnotation) GetBox() *BoundingBox {
	if x != nil {
		return x.Box
	}
	return nil
}

type Point2D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [0, 1]
	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	// [0, 1]
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Point2D) Reset() {
	*x = Point2D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point2D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point2D) ProtoMessage() {}

func (x *Point2D) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point2D.ProtoReflect.Descriptor instead.
func (*Point2D) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{8}
}

func (x *Point2D) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Point2D) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

type Contour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*Point2D `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *Contour) Reset() {
	*x = Contour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contour) ProtoMessage() {}

func (x *Contour) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contour.ProtoReflect.Descriptor instead.
func (*Contour) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{9}
}

func (x *Contour) GetPoints() []*Point2D {
	if x != nil {
		return x.Points
	}
	return nil
}

type Polygon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// outer contour
	Outer *Contour `protobuf:"bytes,1,opt,name=outer,proto3" json:"outer,omitempty"`
	// holes
	Holes []*Contour `protobuf:"bytes,2,rep,name=holes,proto3" json:"holes,omitempty"`
}

func (x *Polygon) Reset() {
	*x = Polygon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Polygon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Polygon) ProtoMessage() {}

func (x *Polygon) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Polygon.ProtoReflect.Descriptor instead.
func (*Polygon) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{10}
}

func (x *Polygon) GetOuter() *Contour {
	if x != nil {
		return x.Outer
	}
	return nil
}

func (x *Polygon) GetHoles() []*Contour {
	if x != nil {
		return x.Holes
	}
	return nil
}

type InstanceSegmentationPrediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid of the associated class
	ClassLabelId string `protobuf:"bytes,1,opt,name=class_label_id,json=classLabelId,proto3" json:"class_label_id,omitempty"`
	// score of the detected object
	Score float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	// bounding box
	Box *BoundingBox `protobuf:"bytes,3,opt,name=box,proto3" json:"box,omitempty"`
	// can contain one ore more polygons
	Polygons []*Polygon `protobuf:"bytes,4,rep,name=polygons,proto3" json:"polygons,omitempty"`
	// optional: original mask
	Mask *FloatMap `protobuf:"bytes,5,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *InstanceSegmentationPrediction) Reset() {
	*x = InstanceSegmentationPrediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceSegmentationPrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSegmentationPrediction) ProtoMessage() {}

func (x *InstanceSegmentationPrediction) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSegmentationPrediction.ProtoReflect.Descriptor instead.
func (*InstanceSegmentationPrediction) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{11}
}

func (x *InstanceSegmentationPrediction) GetClassLabelId() string {
	if x != nil {
		return x.ClassLabelId
	}
	return ""
}

func (x *InstanceSegmentationPrediction) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *InstanceSegmentationPrediction) GetBox() *BoundingBox {
	if x != nil {
		return x.Box
	}
	return nil
}

func (x *InstanceSegmentationPrediction) GetPolygons() []*Polygon {
	if x != nil {
		return x.Polygons
	}
	return nil
}

func (x *InstanceSegmentationPrediction) GetMask() *FloatMap {
	if x != nil {
		return x.Mask
	}
	return nil
}

type InstanceSegmentationAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid of the associated class
	ClassLabelId string `protobuf:"bytes,1,opt,name=class_label_id,json=classLabelId,proto3" json:"class_label_id,omitempty"`
	// bounding box with score
	Box *BoundingBox `protobuf:"bytes,2,opt,name=box,proto3" json:"box,omitempty"`
	// can contain one ore more polygons
	Polygons []*Polygon `protobuf:"bytes,3,rep,name=polygons,proto3" json:"polygons,omitempty"` // TODO: include circles and other drawing types?
}

func (x *InstanceSegmentationAnnotation) Reset() {
	*x = InstanceSegmentationAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceSegmentationAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSegmentationAnnotation) ProtoMessage() {}

func (x *InstanceSegmentationAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSegmentationAnnotation.ProtoReflect.Descriptor instead.
func (*InstanceSegmentationAnnotation) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{12}
}

func (x *InstanceSegmentationAnnotation) GetClassLabelId() string {
	if x != nil {
		return x.ClassLabelId
	}
	return ""
}

func (x *InstanceSegmentationAnnotation) GetBox() *BoundingBox {
	if x != nil {
		return x.Box
	}
	return nil
}

func (x *InstanceSegmentationAnnotation) GetPolygons() []*Polygon {
	if x != nil {
		return x.Polygons
	}
	return nil
}

type OCRPrediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid of the associated class
	ClassLabelId string `protobuf:"bytes,1,opt,name=class_label_id,json=classLabelId,proto3" json:"class_label_id,omitempty"`
	// Contains boundaries. Can be Rectangle or Polygon. If polygon, the polygon might contain zero or more holes.
	Polygon *Polygon `protobuf:"bytes,2,opt,name=polygon,proto3" json:"polygon,omitempty"`
	// Score of this prediction
	Score float64 `protobuf:"fixed64,3,opt,name=score,proto3" json:"score,omitempty"`
	// detected text
	Text []byte `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// individual scores for every character
	CharScores []float64 `protobuf:"fixed64,5,rep,packed,name=char_scores,json=charScores,proto3" json:"char_scores,omitempty"`
}

func (x *OCRPrediction) Reset() {
	*x = OCRPrediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCRPrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCRPrediction) ProtoMessage() {}

func (x *OCRPrediction) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCRPrediction.ProtoReflect.Descriptor instead.
func (*OCRPrediction) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{13}
}

func (x *OCRPrediction) GetClassLabelId() string {
	if x != nil {
		return x.ClassLabelId
	}
	return ""
}

func (x *OCRPrediction) GetPolygon() *Polygon {
	if x != nil {
		return x.Polygon
	}
	return nil
}

func (x *OCRPrediction) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *OCRPrediction) GetText() []byte {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *OCRPrediction) GetCharScores() []float64 {
	if x != nil {
		return x.CharScores
	}
	return nil
}

type OCRAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid of the associated class
	ClassLabelId string `protobuf:"bytes,1,opt,name=class_label_id,json=classLabelId,proto3" json:"class_label_id,omitempty"`
	// Contains boundaries. Can be Rectangle or Polygon. If polygon, the polygon might contain zero or more holes.
	Polygon *Polygon `protobuf:"bytes,2,opt,name=polygon,proto3" json:"polygon,omitempty"`
	// text
	Text []byte `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *OCRAnnotation) Reset() {
	*x = OCRAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCRAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCRAnnotation) ProtoMessage() {}

func (x *OCRAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCRAnnotation.ProtoReflect.Descriptor instead.
func (*OCRAnnotation) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{14}
}

func (x *OCRAnnotation) GetClassLabelId() string {
	if x != nil {
		return x.ClassLabelId
	}
	return ""
}

func (x *OCRAnnotation) GetPolygon() *Polygon {
	if x != nil {
		return x.Polygon
	}
	return nil
}

func (x *OCRAnnotation) GetText() []byte {
	if x != nil {
		return x.Text
	}
	return nil
}

type CodePrediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// associated class
	ClassLabelId string `protobuf:"bytes,1,opt,name=class_label_id,json=classLabelId,proto3" json:"class_label_id,omitempty"`
	// Contains boundaries. Can be Rectangle or Polygon. If polygon, the polygon might contain zero or more holes.
	Polygon *Polygon `protobuf:"bytes,2,opt,name=polygon,proto3" json:"polygon,omitempty"`
	// detected code type
	CodeType string `protobuf:"bytes,3,opt,name=code_type,json=codeType,proto3" json:"code_type,omitempty"`
	// detected text
	Text []byte `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *CodePrediction) Reset() {
	*x = CodePrediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodePrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodePrediction) ProtoMessage() {}

func (x *CodePrediction) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodePrediction.ProtoReflect.Descriptor instead.
func (*CodePrediction) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{15}
}

func (x *CodePrediction) GetClassLabelId() string {
	if x != nil {
		return x.ClassLabelId
	}
	return ""
}

func (x *CodePrediction) GetPolygon() *Polygon {
	if x != nil {
		return x.Polygon
	}
	return nil
}

func (x *CodePrediction) GetCodeType() string {
	if x != nil {
		return x.CodeType
	}
	return ""
}

func (x *CodePrediction) GetText() []byte {
	if x != nil {
		return x.Text
	}
	return nil
}

type CodeAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// associated class
	ClassLabelId string `protobuf:"bytes,1,opt,name=class_label_id,json=classLabelId,proto3" json:"class_label_id,omitempty"`
	// Contains boundaries. Can be Rectangle or Polygon. If polygon, the polygon might contain zero or more holes.
	Polygon *Polygon `protobuf:"bytes,2,opt,name=polygon,proto3" json:"polygon,omitempty"`
	// code type
	CodeType string `protobuf:"bytes,3,opt,name=code_type,json=codeType,proto3" json:"code_type,omitempty"`
	// text
	Text []byte `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *CodeAnnotation) Reset() {
	*x = CodeAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeAnnotation) ProtoMessage() {}

func (x *CodeAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeAnnotation.ProtoReflect.Descriptor instead.
func (*CodeAnnotation) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{16}
}

func (x *CodeAnnotation) GetClassLabelId() string {
	if x != nil {
		return x.ClassLabelId
	}
	return ""
}

func (x *CodeAnnotation) GetPolygon() *Polygon {
	if x != nil {
		return x.Polygon
	}
	return nil
}

func (x *CodeAnnotation) GetCodeType() string {
	if x != nil {
		return x.CodeType
	}
	return ""
}

func (x *CodeAnnotation) GetText() []byte {
	if x != nil {
		return x.Text
	}
	return nil
}

type ComputedPropertyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ComputedPropertyValue_XInt64
	//	*ComputedPropertyValue_XDouble
	//	*ComputedPropertyValue_XString
	Value isComputedPropertyValue_Value `protobuf_oneof:"value"`
}

func (x *ComputedPropertyValue) Reset() {
	*x = ComputedPropertyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputedPropertyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputedPropertyValue) ProtoMessage() {}

func (x *ComputedPropertyValue) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputedPropertyValue.ProtoReflect.Descriptor instead.
func (*ComputedPropertyValue) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{17}
}

func (m *ComputedPropertyValue) GetValue() isComputedPropertyValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ComputedPropertyValue) GetXInt64() int64 {
	if x, ok := x.GetValue().(*ComputedPropertyValue_XInt64); ok {
		return x.XInt64
	}
	return 0
}

func (x *ComputedPropertyValue) GetXDouble() float64 {
	if x, ok := x.GetValue().(*ComputedPropertyValue_XDouble); ok {
		return x.XDouble
	}
	return 0
}

func (x *ComputedPropertyValue) GetXString() string {
	if x, ok := x.GetValue().(*ComputedPropertyValue_XString); ok {
		return x.XString
	}
	return ""
}

type isComputedPropertyValue_Value interface {
	isComputedPropertyValue_Value()
}

type ComputedPropertyValue_XInt64 struct {
	XInt64 int64 `protobuf:"varint,1,opt,name=_int64,json=Int64,proto3,oneof"`
}

type ComputedPropertyValue_XDouble struct {
	XDouble float64 `protobuf:"fixed64,2,opt,name=_double,json=Double,proto3,oneof"`
}

type ComputedPropertyValue_XString struct {
	XString string `protobuf:"bytes,3,opt,name=_string,json=String,proto3,oneof"`
}

func (*ComputedPropertyValue_XInt64) isComputedPropertyValue_Value() {}

func (*ComputedPropertyValue_XDouble) isComputedPropertyValue_Value() {}

func (*ComputedPropertyValue_XString) isComputedPropertyValue_Value() {}

type ComputedProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject ComputedPropertySubjects `protobuf:"varint,1,opt,name=subject,proto3,enum=denkproto.ComputedPropertySubjects" json:"subject,omitempty"`
	Value   *ComputedPropertyValue   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ComputedProperty) Reset() {
	*x = ComputedProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputedProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputedProperty) ProtoMessage() {}

func (x *ComputedProperty) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputedProperty.ProtoReflect.Descriptor instead.
func (*ComputedProperty) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{18}
}

func (x *ComputedProperty) GetSubject() ComputedPropertySubjects {
	if x != nil {
		return x.Subject
	}
	return ComputedPropertySubjects_COMPUTED_PROPERTY_SUBJECT_MEAN_GRAY_VALUE
}

func (x *ComputedProperty) GetValue() *ComputedPropertyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Annotation:
	//	*Annotation_Classification
	//	*Annotation_ObjectDetection
	//	*Annotation_InstanceSegmentation
	//	*Annotation_Ocr
	//	*Annotation_Code
	Annotation isAnnotation_Annotation `protobuf_oneof:"annotation"`
}

func (x *Annotation) Reset() {
	*x = Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation) ProtoMessage() {}

func (x *Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation.ProtoReflect.Descriptor instead.
func (*Annotation) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{19}
}

func (m *Annotation) GetAnnotation() isAnnotation_Annotation {
	if m != nil {
		return m.Annotation
	}
	return nil
}

func (x *Annotation) GetClassification() *ClassificationAnnotation {
	if x, ok := x.GetAnnotation().(*Annotation_Classification); ok {
		return x.Classification
	}
	return nil
}

func (x *Annotation) GetObjectDetection() *ObjectDetectionAnnotation {
	if x, ok := x.GetAnnotation().(*Annotation_ObjectDetection); ok {
		return x.ObjectDetection
	}
	return nil
}

func (x *Annotation) GetInstanceSegmentation() *InstanceSegmentationAnnotation {
	if x, ok := x.GetAnnotation().(*Annotation_InstanceSegmentation); ok {
		return x.InstanceSegmentation
	}
	return nil
}

func (x *Annotation) GetOcr() *OCRAnnotation {
	if x, ok := x.GetAnnotation().(*Annotation_Ocr); ok {
		return x.Ocr
	}
	return nil
}

func (x *Annotation) GetCode() *CodeAnnotation {
	if x, ok := x.GetAnnotation().(*Annotation_Code); ok {
		return x.Code
	}
	return nil
}

type isAnnotation_Annotation interface {
	isAnnotation_Annotation()
}

type Annotation_Classification struct {
	Classification *ClassificationAnnotation `protobuf:"bytes,1,opt,name=classification,proto3,oneof"`
}

type Annotation_ObjectDetection struct {
	ObjectDetection *ObjectDetectionAnnotation `protobuf:"bytes,2,opt,name=object_detection,json=objectDetection,proto3,oneof"`
}

type Annotation_InstanceSegmentation struct {
	InstanceSegmentation *InstanceSegmentationAnnotation `protobuf:"bytes,3,opt,name=instance_segmentation,json=instanceSegmentation,proto3,oneof"`
}

type Annotation_Ocr struct {
	Ocr *OCRAnnotation `protobuf:"bytes,4,opt,name=ocr,proto3,oneof"`
}

type Annotation_Code struct {
	Code *CodeAnnotation `protobuf:"bytes,5,opt,name=code,proto3,oneof"`
}

func (*Annotation_Classification) isAnnotation_Annotation() {}

func (*Annotation_ObjectDetection) isAnnotation_Annotation() {}

func (*Annotation_InstanceSegmentation) isAnnotation_Annotation() {}

func (*Annotation_Ocr) isAnnotation_Annotation() {}

func (*Annotation_Code) isAnnotation_Annotation() {}

type Prediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object itself
	//
	// Types that are assignable to Prediction:
	//	*Prediction_Classification
	//	*Prediction_ObjectDetection
	//	*Prediction_InstanceSegmentation
	//	*Prediction_Ocr
	//	*Prediction_Code
	//	*Prediction_Segmentation
	//	*Prediction_AnomalyDetection
	Prediction isPrediction_Prediction `protobuf_oneof:"prediction"`
	// these properties will be computed on the fly
	// example: meanGrayValue.
	// It will be only computed if there is a filter- or decision-rule that evaluates meanGrayValue
	// Once computed, values can be cached here and can fetched by other rules that also evaluate the same property.
	// Reason: We don't want to waste compute time for values that we don't need.
	ComputedProperties []*ComputedProperty `protobuf:"bytes,20,rep,name=computed_properties,json=computedProperties,proto3" json:"computed_properties,omitempty"`
}

func (x *Prediction) Reset() {
	*x = Prediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prediction) ProtoMessage() {}

func (x *Prediction) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prediction.ProtoReflect.Descriptor instead.
func (*Prediction) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{20}
}

func (m *Prediction) GetPrediction() isPrediction_Prediction {
	if m != nil {
		return m.Prediction
	}
	return nil
}

func (x *Prediction) GetClassification() *ClassificationPrediction {
	if x, ok := x.GetPrediction().(*Prediction_Classification); ok {
		return x.Classification
	}
	return nil
}

func (x *Prediction) GetObjectDetection() *ObjectDetectionPrediction {
	if x, ok := x.GetPrediction().(*Prediction_ObjectDetection); ok {
		return x.ObjectDetection
	}
	return nil
}

func (x *Prediction) GetInstanceSegmentation() *InstanceSegmentationPrediction {
	if x, ok := x.GetPrediction().(*Prediction_InstanceSegmentation); ok {
		return x.InstanceSegmentation
	}
	return nil
}

func (x *Prediction) GetOcr() *OCRPrediction {
	if x, ok := x.GetPrediction().(*Prediction_Ocr); ok {
		return x.Ocr
	}
	return nil
}

func (x *Prediction) GetCode() *CodePrediction {
	if x, ok := x.GetPrediction().(*Prediction_Code); ok {
		return x.Code
	}
	return nil
}

func (x *Prediction) GetSegmentation() *FloatMap {
	if x, ok := x.GetPrediction().(*Prediction_Segmentation); ok {
		return x.Segmentation
	}
	return nil
}

func (x *Prediction) GetAnomalyDetection() *FloatMap {
	if x, ok := x.GetPrediction().(*Prediction_AnomalyDetection); ok {
		return x.AnomalyDetection
	}
	return nil
}

func (x *Prediction) GetComputedProperties() []*ComputedProperty {
	if x != nil {
		return x.ComputedProperties
	}
	return nil
}

type isPrediction_Prediction interface {
	isPrediction_Prediction()
}

type Prediction_Classification struct {
	Classification *ClassificationPrediction `protobuf:"bytes,1,opt,name=classification,proto3,oneof"`
}

type Prediction_ObjectDetection struct {
	ObjectDetection *ObjectDetectionPrediction `protobuf:"bytes,2,opt,name=object_detection,json=objectDetection,proto3,oneof"`
}

type Prediction_InstanceSegmentation struct {
	InstanceSegmentation *InstanceSegmentationPrediction `protobuf:"bytes,3,opt,name=instance_segmentation,json=instanceSegmentation,proto3,oneof"`
}

type Prediction_Ocr struct {
	Ocr *OCRPrediction `protobuf:"bytes,4,opt,name=ocr,proto3,oneof"`
}

type Prediction_Code struct {
	Code *CodePrediction `protobuf:"bytes,5,opt,name=code,proto3,oneof"`
}

type Prediction_Segmentation struct {
	Segmentation *FloatMap `protobuf:"bytes,6,opt,name=segmentation,proto3,oneof"`
}

type Prediction_AnomalyDetection struct {
	AnomalyDetection *FloatMap `protobuf:"bytes,7,opt,name=anomaly_detection,json=anomalyDetection,proto3,oneof"`
}

func (*Prediction_Classification) isPrediction_Prediction() {}

func (*Prediction_ObjectDetection) isPrediction_Prediction() {}

func (*Prediction_InstanceSegmentation) isPrediction_Prediction() {}

func (*Prediction_Ocr) isPrediction_Prediction() {}

func (*Prediction_Code) isPrediction_Prediction() {}

func (*Prediction_Segmentation) isPrediction_Prediction() {}

func (*Prediction_AnomalyDetection) isPrediction_Prediction() {}

type Predictions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predictions []*Prediction `protobuf:"bytes,1,rep,name=predictions,proto3" json:"predictions,omitempty"`
}

func (x *Predictions) Reset() {
	*x = Predictions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Predictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Predictions) ProtoMessage() {}

func (x *Predictions) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Predictions.ProtoReflect.Descriptor instead.
func (*Predictions) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{21}
}

func (x *Predictions) GetPredictions() []*Prediction {
	if x != nil {
		return x.Predictions
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grade int32  `protobuf:"varint,1,opt,name=grade,proto3" json:"grade,omitempty"` // piority of the result: when multiple results are possible (according to rules) the result with highest priority will be selected
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`    // name of the result
	Color string `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`  // color of this result. Can be any css color string.
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{22}
}

func (x *Result) GetGrade() int32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *Result) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Result) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type ClassLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid of the class
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// uuid of the network
	NetworkId string `protobuf:"bytes,2,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// index of the class (as it is present in network)
	Index int32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	// name o the class
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// all css color formats allowed
	Color string `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *ClassLabel) Reset() {
	*x = ClassLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassLabel) ProtoMessage() {}

func (x *ClassLabel) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassLabel.ProtoReflect.Descriptor instead.
func (*ClassLabel) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{23}
}

func (x *ClassLabel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClassLabel) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *ClassLabel) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ClassLabel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClassLabel) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type DENKbuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid of the buffer
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// project to which the denkbuffer belongs
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// uuid of the user that was logged-in when the buffer was created
	CreatedByUserId string `protobuf:"bytes,3,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	// uuid of the group this buffer belongs to
	OwnedByGroupId string `protobuf:"bytes,4,opt,name=owned_by_group_id,json=ownedByGroupId,proto3" json:"owned_by_group_id,omitempty"`
	// the time when this buffer was created
	// if triggers are present, this should be equal to latest trigger timestamp
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// pipeline config that was used to produce this buffer
	// can be used to reconstruct full pipeline
	// yaml format
	PipelineConfig string `protobuf:"bytes,6,opt,name=pipeline_config,json=pipelineConfig,proto3" json:"pipeline_config,omitempty"`
	// output_port_id -> port_name
	// contains readable names for the output ports of the pipeline.
	PortNames map[string]string `protobuf:"bytes,7,rep,name=port_names,json=portNames,proto3" json:"port_names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// class_label_id -> class_label.
	// Is part of every buffer object and pre-filled by pipeline service.
	// Can be used to draw correct colors for detected objects.
	ClassLabels map[string]*ClassLabel `protobuf:"bytes,11,rep,name=class_labels,json=classLabels,proto3" json:"class_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// trigger timestamps
	// latest timestamp should be equal to buffer.created_at
	// output_port_id -> timestamp
	Triggers map[string]*timestamp.Timestamp `protobuf:"bytes,21,rep,name=triggers,proto3" json:"triggers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Pipeline images
	// output_port_id -> image
	Images map[string]*Image `protobuf:"bytes,31,rep,name=images,proto3" json:"images,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Annotations
	// Annotations made by user
	Annotations []*Annotation `protobuf:"bytes,61,rep,name=annotations,proto3" json:"annotations,omitempty"`
	// Contains predictions made by nodes.
	// Can be used in filter and decision node.
	// Can be used in clients to draw found objects.
	// output_port_id -> Predictions (each output can produce multiple Predictions. E.g. ObjectDetection can find 2 or more bounding boxes)
	Predictions map[string]*Predictions `protobuf:"bytes,71,rep,name=predictions,proto3" json:"predictions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Contains over all results.
	// (Possible future use-case: Multiple results possible when multiple decision nodes are used.)
	// output_port_id -> result
	Results map[string]*Result `protobuf:"bytes,81,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// contains tags that can be used to identify this denkbuffer
	Tags []string `protobuf:"bytes,101,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *DENKbuffer) Reset() {
	*x = DENKbuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DENKbuffer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DENKbuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DENKbuffer) ProtoMessage() {}

func (x *DENKbuffer) ProtoReflect() protoreflect.Message {
	mi := &file_DENKbuffer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DENKbuffer.ProtoReflect.Descriptor instead.
func (*DENKbuffer) Descriptor() ([]byte, []int) {
	return file_DENKbuffer_proto_rawDescGZIP(), []int{24}
}

func (x *DENKbuffer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DENKbuffer) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DENKbuffer) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *DENKbuffer) GetOwnedByGroupId() string {
	if x != nil {
		return x.OwnedByGroupId
	}
	return ""
}

func (x *DENKbuffer) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DENKbuffer) GetPipelineConfig() string {
	if x != nil {
		return x.PipelineConfig
	}
	return ""
}

func (x *DENKbuffer) GetPortNames() map[string]string {
	if x != nil {
		return x.PortNames
	}
	return nil
}

func (x *DENKbuffer) GetClassLabels() map[string]*ClassLabel {
	if x != nil {
		return x.ClassLabels
	}
	return nil
}

func (x *DENKbuffer) GetTriggers() map[string]*timestamp.Timestamp {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *DENKbuffer) GetImages() map[string]*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *DENKbuffer) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *DENKbuffer) GetPredictions() map[string]*Predictions {
	if x != nil {
		return x.Predictions
	}
	return nil
}

func (x *DENKbuffer) GetResults() map[string]*Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *DENKbuffer) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_DENKbuffer_proto protoreflect.FileDescriptor

var file_DENKbuffer_proto_rawDesc = []byte{
	0x0a, 0x10, 0x44, 0x45, 0x4e, 0x4b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6,
	0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x4d, 0x61, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70,
	0x12, 0x36, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x56, 0x0a, 0x18, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x56,
	0x0a, 0x18, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x4d, 0x0a, 0x0b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x78, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x78, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x79, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x79, 0x32, 0x22, 0x81, 0x01, 0x0a, 0x19, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x28, 0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64,
	0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x6f, 0x78, 0x52, 0x03, 0x62, 0x6f, 0x78, 0x22, 0x6b, 0x0a, 0x19, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x03,
	0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x65, 0x6e, 0x6b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f,
	0x78, 0x52, 0x03, 0x62, 0x6f, 0x78, 0x22, 0x25, 0x0a, 0x07, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x32,
	0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12,
	0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x22, 0x35, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x6f, 0x75, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x64, 0x52, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0x5d, 0x0a, 0x07, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x05, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x6f,
	0x75, 0x72, 0x52, 0x05, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x68, 0x6f, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x6f, 0x75, 0x72, 0x52, 0x05, 0x68, 0x6f,
	0x6c, 0x65, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x52, 0x03, 0x62, 0x6f, 0x78, 0x12, 0x2e, 0x0a, 0x08,
	0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67,
	0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x04,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x65, 0x6e,
	0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x52,
	0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0xa0, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x65,
	0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x42, 0x6f, 0x78, 0x52, 0x03, 0x62, 0x6f, 0x78, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x79,
	0x67, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x6e,
	0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52, 0x08,
	0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x0d, 0x4f, 0x43, 0x52,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x77, 0x0a, 0x0d, 0x4f, 0x43, 0x52,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x70,
	0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64,
	0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e,
	0x52, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x0e, 0x43,
	0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x6f, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x07, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12,
	0x19, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x6e, 0x6b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xfd, 0x02, 0x0a, 0x0a, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x60, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x6f, 0x63, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x43, 0x52, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x63, 0x72,
	0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xca, 0x04, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x60, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x6f, 0x63, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x43, 0x52, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x63, 0x72,
	0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0c,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x11,
	0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x10,
	0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4c, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x0c,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x0b,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x48, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x7b,
	0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xba, 0x09, 0x0a, 0x0a,
	0x44, 0x45, 0x4e, 0x4b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x65, 0x6e, 0x6b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x45, 0x4e, 0x4b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x45, 0x4e,
	0x4b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x45, 0x4e, 0x4b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x45, 0x4e, 0x4b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x3d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x0b, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x47, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x45, 0x4e, 0x4b,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x51, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x45, 0x4e, 0x4b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x10, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x6e, 0x6b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0d, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x56, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x6e,
	0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x28, 0x0a, 0x0a, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x61, 0x77, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x4a, 0x50, 0x45, 0x47, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4e, 0x47,
	0x10, 0x02, 0x2a, 0x49, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2d,
	0x0a, 0x29, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45,
	0x52, 0x54, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x41, 0x4e,
	0x5f, 0x47, 0x52, 0x41, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x00, 0x42, 0x28, 0x48,
	0x03, 0x5a, 0x17, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f,
	0x64, 0x65, 0x6e, 0x6b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0xaa, 0x02, 0x0a, 0x44, 0x45, 0x4e,
	0x4b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_DENKbuffer_proto_rawDescOnce sync.Once
	file_DENKbuffer_proto_rawDescData = file_DENKbuffer_proto_rawDesc
)

func file_DENKbuffer_proto_rawDescGZIP() []byte {
	file_DENKbuffer_proto_rawDescOnce.Do(func() {
		file_DENKbuffer_proto_rawDescData = protoimpl.X.CompressGZIP(file_DENKbuffer_proto_rawDescData)
	})
	return file_DENKbuffer_proto_rawDescData
}

var file_DENKbuffer_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_DENKbuffer_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_DENKbuffer_proto_goTypes = []interface{}{
	(ImageTypes)(0),                        // 0: denkproto.ImageTypes
	(ComputedPropertySubjects)(0),          // 1: denkproto.ComputedPropertySubjects
	(*Image)(nil),                          // 2: denkproto.Image
	(*FloatMapChannel)(nil),                // 3: denkproto.FloatMapChannel
	(*FloatMap)(nil),                       // 4: denkproto.FloatMap
	(*ClassificationAnnotation)(nil),       // 5: denkproto.ClassificationAnnotation
	(*ClassificationPrediction)(nil),       // 6: denkproto.ClassificationPrediction
	(*BoundingBox)(nil),                    // 7: denkproto.BoundingBox
	(*ObjectDetectionPrediction)(nil),      // 8: denkproto.ObjectDetectionPrediction
	(*ObjectDetectionAnnotation)(nil),      // 9: denkproto.ObjectDetectionAnnotation
	(*Point2D)(nil),                        // 10: denkproto.Point2d
	(*Contour)(nil),                        // 11: denkproto.Contour
	(*Polygon)(nil),                        // 12: denkproto.Polygon
	(*InstanceSegmentationPrediction)(nil), // 13: denkproto.InstanceSegmentationPrediction
	(*InstanceSegmentationAnnotation)(nil), // 14: denkproto.InstanceSegmentationAnnotation
	(*OCRPrediction)(nil),                  // 15: denkproto.OCRPrediction
	(*OCRAnnotation)(nil),                  // 16: denkproto.OCRAnnotation
	(*CodePrediction)(nil),                 // 17: denkproto.CodePrediction
	(*CodeAnnotation)(nil),                 // 18: denkproto.CodeAnnotation
	(*ComputedPropertyValue)(nil),          // 19: denkproto.ComputedPropertyValue
	(*ComputedProperty)(nil),               // 20: denkproto.ComputedProperty
	(*Annotation)(nil),                     // 21: denkproto.Annotation
	(*Prediction)(nil),                     // 22: denkproto.Prediction
	(*Predictions)(nil),                    // 23: denkproto.Predictions
	(*Result)(nil),                         // 24: denkproto.Result
	(*ClassLabel)(nil),                     // 25: denkproto.ClassLabel
	(*DENKbuffer)(nil),                     // 26: denkproto.DENKbuffer
	nil,                                    // 27: denkproto.DENKbuffer.PortNamesEntry
	nil,                                    // 28: denkproto.DENKbuffer.ClassLabelsEntry
	nil,                                    // 29: denkproto.DENKbuffer.TriggersEntry
	nil,                                    // 30: denkproto.DENKbuffer.ImagesEntry
	nil,                                    // 31: denkproto.DENKbuffer.PredictionsEntry
	nil,                                    // 32: denkproto.DENKbuffer.ResultsEntry
	(*timestamp.Timestamp)(nil),            // 33: google.protobuf.Timestamp
}
var file_DENKbuffer_proto_depIdxs = []int32{
	0,  // 0: denkproto.Image.imageType:type_name -> denkproto.ImageTypes
	3,  // 1: denkproto.FloatMap.channels:type_name -> denkproto.FloatMapChannel
	7,  // 2: denkproto.ObjectDetectionPrediction.box:type_name -> denkproto.BoundingBox
	7,  // 3: denkproto.ObjectDetectionAnnotation.box:type_name -> denkproto.BoundingBox
	10, // 4: denkproto.Contour.points:type_name -> denkproto.Point2d
	11, // 5: denkproto.Polygon.outer:type_name -> denkproto.Contour
	11, // 6: denkproto.Polygon.holes:type_name -> denkproto.Contour
	7,  // 7: denkproto.InstanceSegmentationPrediction.box:type_name -> denkproto.BoundingBox
	12, // 8: denkproto.InstanceSegmentationPrediction.polygons:type_name -> denkproto.Polygon
	4,  // 9: denkproto.InstanceSegmentationPrediction.mask:type_name -> denkproto.FloatMap
	7,  // 10: denkproto.InstanceSegmentationAnnotation.box:type_name -> denkproto.BoundingBox
	12, // 11: denkproto.InstanceSegmentationAnnotation.polygons:type_name -> denkproto.Polygon
	12, // 12: denkproto.OCRPrediction.polygon:type_name -> denkproto.Polygon
	12, // 13: denkproto.OCRAnnotation.polygon:type_name -> denkproto.Polygon
	12, // 14: denkproto.CodePrediction.polygon:type_name -> denkproto.Polygon
	12, // 15: denkproto.CodeAnnotation.polygon:type_name -> denkproto.Polygon
	1,  // 16: denkproto.ComputedProperty.subject:type_name -> denkproto.ComputedPropertySubjects
	19, // 17: denkproto.ComputedProperty.value:type_name -> denkproto.ComputedPropertyValue
	5,  // 18: denkproto.Annotation.classification:type_name -> denkproto.ClassificationAnnotation
	9,  // 19: denkproto.Annotation.object_detection:type_name -> denkproto.ObjectDetectionAnnotation
	14, // 20: denkproto.Annotation.instance_segmentation:type_name -> denkproto.InstanceSegmentationAnnotation
	16, // 21: denkproto.Annotation.ocr:type_name -> denkproto.OCRAnnotation
	18, // 22: denkproto.Annotation.code:type_name -> denkproto.CodeAnnotation
	6,  // 23: denkproto.Prediction.classification:type_name -> denkproto.ClassificationPrediction
	8,  // 24: denkproto.Prediction.object_detection:type_name -> denkproto.ObjectDetectionPrediction
	13, // 25: denkproto.Prediction.instance_segmentation:type_name -> denkproto.InstanceSegmentationPrediction
	15, // 26: denkproto.Prediction.ocr:type_name -> denkproto.OCRPrediction
	17, // 27: denkproto.Prediction.code:type_name -> denkproto.CodePrediction
	4,  // 28: denkproto.Prediction.segmentation:type_name -> denkproto.FloatMap
	4,  // 29: denkproto.Prediction.anomaly_detection:type_name -> denkproto.FloatMap
	20, // 30: denkproto.Prediction.computed_properties:type_name -> denkproto.ComputedProperty
	22, // 31: denkproto.Predictions.predictions:type_name -> denkproto.Prediction
	33, // 32: denkproto.DENKbuffer.created_at:type_name -> google.protobuf.Timestamp
	27, // 33: denkproto.DENKbuffer.port_names:type_name -> denkproto.DENKbuffer.PortNamesEntry
	28, // 34: denkproto.DENKbuffer.class_labels:type_name -> denkproto.DENKbuffer.ClassLabelsEntry
	29, // 35: denkproto.DENKbuffer.triggers:type_name -> denkproto.DENKbuffer.TriggersEntry
	30, // 36: denkproto.DENKbuffer.images:type_name -> denkproto.DENKbuffer.ImagesEntry
	21, // 37: denkproto.DENKbuffer.annotations:type_name -> denkproto.Annotation
	31, // 38: denkproto.DENKbuffer.predictions:type_name -> denkproto.DENKbuffer.PredictionsEntry
	32, // 39: denkproto.DENKbuffer.results:type_name -> denkproto.DENKbuffer.ResultsEntry
	25, // 40: denkproto.DENKbuffer.ClassLabelsEntry.value:type_name -> denkproto.ClassLabel
	33, // 41: denkproto.DENKbuffer.TriggersEntry.value:type_name -> google.protobuf.Timestamp
	2,  // 42: denkproto.DENKbuffer.ImagesEntry.value:type_name -> denkproto.Image
	23, // 43: denkproto.DENKbuffer.PredictionsEntry.value:type_name -> denkproto.Predictions
	24, // 44: denkproto.DENKbuffer.ResultsEntry.value:type_name -> denkproto.Result
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_DENKbuffer_proto_init() }
func file_DENKbuffer_proto_init() {
	if File_DENKbuffer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_DENKbuffer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatMapChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassificationAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassificationPrediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoundingBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectDetectionPrediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectDetectionAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point2D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Polygon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceSegmentationPrediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceSegmentationAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCRPrediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCRAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodePrediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputedPropertyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputedProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Predictions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DENKbuffer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DENKbuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_DENKbuffer_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*ComputedPropertyValue_XInt64)(nil),
		(*ComputedPropertyValue_XDouble)(nil),
		(*ComputedPropertyValue_XString)(nil),
	}
	file_DENKbuffer_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*Annotation_Classification)(nil),
		(*Annotation_ObjectDetection)(nil),
		(*Annotation_InstanceSegmentation)(nil),
		(*Annotation_Ocr)(nil),
		(*Annotation_Code)(nil),
	}
	file_DENKbuffer_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*Prediction_Classification)(nil),
		(*Prediction_ObjectDetection)(nil),
		(*Prediction_InstanceSegmentation)(nil),
		(*Prediction_Ocr)(nil),
		(*Prediction_Code)(nil),
		(*Prediction_Segmentation)(nil),
		(*Prediction_AnomalyDetection)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_DENKbuffer_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_DENKbuffer_proto_goTypes,
		DependencyIndexes: file_DENKbuffer_proto_depIdxs,
		EnumInfos:         file_DENKbuffer_proto_enumTypes,
		MessageInfos:      file_DENKbuffer_proto_msgTypes,
	}.Build()
	File_DENKbuffer_proto = out.File
	file_DENKbuffer_proto_rawDesc = nil
	file_DENKbuffer_proto_goTypes = nil
	file_DENKbuffer_proto_depIdxs = nil
}
