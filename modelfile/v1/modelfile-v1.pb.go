// Definition of Model File Structure
// Version 0.2

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.26.0
// source: modelfile-v1.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileType int32

const (
	FileType_FT_MODEL        FileType = 0
	FileType_FT_VIZIOTIX_KEY FileType = 1
	FileType_FT_ZXING_KEY    FileType = 2
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "FT_MODEL",
		1: "FT_VIZIOTIX_KEY",
		2: "FT_ZXING_KEY",
	}
	FileType_value = map[string]int32{
		"FT_MODEL":        0,
		"FT_VIZIOTIX_KEY": 1,
		"FT_ZXING_KEY":    2,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_modelfile_v1_proto_enumTypes[0].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_modelfile_v1_proto_enumTypes[0]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_modelfile_v1_proto_rawDescGZIP(), []int{0}
}

type CompressionMethod int32

const (
	CompressionMethod_NONE CompressionMethod = 0
	CompressionMethod_GZIP CompressionMethod = 1
	CompressionMethod_ZLIB CompressionMethod = 2
	CompressionMethod_LZMA CompressionMethod = 3
	CompressionMethod_BZ2  CompressionMethod = 4
)

// Enum value maps for CompressionMethod.
var (
	CompressionMethod_name = map[int32]string{
		0: "NONE",
		1: "GZIP",
		2: "ZLIB",
		3: "LZMA",
		4: "BZ2",
	}
	CompressionMethod_value = map[string]int32{
		"NONE": 0,
		"GZIP": 1,
		"ZLIB": 2,
		"LZMA": 3,
		"BZ2":  4,
	}
)

func (x CompressionMethod) Enum() *CompressionMethod {
	p := new(CompressionMethod)
	*p = x
	return p
}

func (x CompressionMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressionMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_modelfile_v1_proto_enumTypes[1].Descriptor()
}

func (CompressionMethod) Type() protoreflect.EnumType {
	return &file_modelfile_v1_proto_enumTypes[1]
}

func (x CompressionMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressionMethod.Descriptor instead.
func (CompressionMethod) EnumDescriptor() ([]byte, []int) {
	return file_modelfile_v1_proto_rawDescGZIP(), []int{1}
}

type DataType int32

const (
	DataType_SCALAR_INT                              DataType = 0 // UNUSED
	DataType_SCALAR_FLOAT                            DataType = 1 // image classifier
	DataType_IMAGE_RAW_INT                           DataType = 2 // UNUSED
	DataType_IMAGE_RAW_FLOAT                         DataType = 3 // segmentation map for models with one segmentationmap
	DataType_IMAGE_PNG                               DataType = 4 // UNUSED
	DataType_IMAGE_JPG                               DataType = 5 // UNUSED
	DataType_IMAGE_TIF                               DataType = 6 // UNUSED
	DataType_BOUNDING_BOX_LIST                       DataType = 7
	DataType_BOUNDING_BOX_LIST_SEGMENTATION          DataType = 8
	DataType_BOUNDING_BOX_LIST_SEGMENTATION_HIGH_RES DataType = 9
	DataType_OPTICAL_CHARACTER_RECOGNITION           DataType = 10
	DataType_BARCODES                                DataType = 11
	DataType_BOUNDING_BOX_LIST_HALF_ORIENTATION      DataType = 12
	DataType_BOUNDING_BOX_LIST_FULL_ORIENTATION      DataType = 13
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0:  "SCALAR_INT",
		1:  "SCALAR_FLOAT",
		2:  "IMAGE_RAW_INT",
		3:  "IMAGE_RAW_FLOAT",
		4:  "IMAGE_PNG",
		5:  "IMAGE_JPG",
		6:  "IMAGE_TIF",
		7:  "BOUNDING_BOX_LIST",
		8:  "BOUNDING_BOX_LIST_SEGMENTATION",
		9:  "BOUNDING_BOX_LIST_SEGMENTATION_HIGH_RES",
		10: "OPTICAL_CHARACTER_RECOGNITION",
		11: "BARCODES",
		12: "BOUNDING_BOX_LIST_HALF_ORIENTATION",
		13: "BOUNDING_BOX_LIST_FULL_ORIENTATION",
	}
	DataType_value = map[string]int32{
		"SCALAR_INT":                     0,
		"SCALAR_FLOAT":                   1,
		"IMAGE_RAW_INT":                  2,
		"IMAGE_RAW_FLOAT":                3,
		"IMAGE_PNG":                      4,
		"IMAGE_JPG":                      5,
		"IMAGE_TIF":                      6,
		"BOUNDING_BOX_LIST":              7,
		"BOUNDING_BOX_LIST_SEGMENTATION": 8,
		"BOUNDING_BOX_LIST_SEGMENTATION_HIGH_RES": 9,
		"OPTICAL_CHARACTER_RECOGNITION":           10,
		"BARCODES":                                11,
		"BOUNDING_BOX_LIST_HALF_ORIENTATION":      12,
		"BOUNDING_BOX_LIST_FULL_ORIENTATION":      13,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_modelfile_v1_proto_enumTypes[2].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_modelfile_v1_proto_enumTypes[2]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_modelfile_v1_proto_rawDescGZIP(), []int{2}
}

// Keep in sync with results.proto
type ModelType int32

const (
	ModelType_REGULAR         ModelType = 0
	ModelType_AREA_DEFINITION ModelType = 1
)

// Enum value maps for ModelType.
var (
	ModelType_name = map[int32]string{
		0: "REGULAR",
		1: "AREA_DEFINITION",
	}
	ModelType_value = map[string]int32{
		"REGULAR":         0,
		"AREA_DEFINITION": 1,
	}
)

func (x ModelType) Enum() *ModelType {
	p := new(ModelType)
	*p = x
	return p
}

func (x ModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_modelfile_v1_proto_enumTypes[3].Descriptor()
}

func (ModelType) Type() protoreflect.EnumType {
	return &file_modelfile_v1_proto_enumTypes[3]
}

func (x ModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelType.Descriptor instead.
func (ModelType) EnumDescriptor() ([]byte, []int) {
	return file_modelfile_v1_proto_rawDescGZIP(), []int{3}
}

type ModelOutputType int32

const (
	ModelOutputType_TYPE_UNKNOWN                           ModelOutputType = 0
	ModelOutputType_TYPE_CLASSIFICATION                    ModelOutputType = 1
	ModelOutputType_TYPE_SEGMENTATION                      ModelOutputType = 2
	ModelOutputType_TYPE_INSTANCE_SEGMENTATION             ModelOutputType = 3
	ModelOutputType_TYPE_OBJECT_DETECTION                  ModelOutputType = 4
	ModelOutputType_TYPE_ANOMALY_DETECTION                 ModelOutputType = 5
	ModelOutputType_TYPE_OPTICAL_CHARACTER_RECOGNITION     ModelOutputType = 6
	ModelOutputType_TYPE_BARCODES                          ModelOutputType = 7
	ModelOutputType_TYPE_OBJECT_DETECTION_HALF_ORIENTATION ModelOutputType = 8
	ModelOutputType_TYPE_OBJECT_DETECTION_FULL_ORIENTATION ModelOutputType = 9
)

// Enum value maps for ModelOutputType.
var (
	ModelOutputType_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "TYPE_CLASSIFICATION",
		2: "TYPE_SEGMENTATION",
		3: "TYPE_INSTANCE_SEGMENTATION",
		4: "TYPE_OBJECT_DETECTION",
		5: "TYPE_ANOMALY_DETECTION",
		6: "TYPE_OPTICAL_CHARACTER_RECOGNITION",
		7: "TYPE_BARCODES",
		8: "TYPE_OBJECT_DETECTION_HALF_ORIENTATION",
		9: "TYPE_OBJECT_DETECTION_FULL_ORIENTATION",
	}
	ModelOutputType_value = map[string]int32{
		"TYPE_UNKNOWN":                           0,
		"TYPE_CLASSIFICATION":                    1,
		"TYPE_SEGMENTATION":                      2,
		"TYPE_INSTANCE_SEGMENTATION":             3,
		"TYPE_OBJECT_DETECTION":                  4,
		"TYPE_ANOMALY_DETECTION":                 5,
		"TYPE_OPTICAL_CHARACTER_RECOGNITION":     6,
		"TYPE_BARCODES":                          7,
		"TYPE_OBJECT_DETECTION_HALF_ORIENTATION": 8,
		"TYPE_OBJECT_DETECTION_FULL_ORIENTATION": 9,
	}
)

func (x ModelOutputType) Enum() *ModelOutputType {
	p := new(ModelOutputType)
	*p = x
	return p
}

func (x ModelOutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelOutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_modelfile_v1_proto_enumTypes[4].Descriptor()
}

func (ModelOutputType) Type() protoreflect.EnumType {
	return &file_modelfile_v1_proto_enumTypes[4]
}

func (x ModelOutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelOutputType.Descriptor instead.
func (ModelOutputType) EnumDescriptor() ([]byte, []int) {
	return file_modelfile_v1_proto_rawDescGZIP(), []int{4}
}

type RegionFromEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left   float64 `protobuf:"fixed64,1,opt,name=left,proto3" json:"left,omitempty"`
	Right  float64 `protobuf:"fixed64,2,opt,name=right,proto3" json:"right,omitempty"`
	Top    float64 `protobuf:"fixed64,3,opt,name=top,proto3" json:"top,omitempty"`
	Bottom float64 `protobuf:"fixed64,4,opt,name=bottom,proto3" json:"bottom,omitempty"`
}

func (x *RegionFromEdge) Reset() {
	*x = RegionFromEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modelfile_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionFromEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionFromEdge) ProtoMessage() {}

func (x *RegionFromEdge) ProtoReflect() protoreflect.Message {
	mi := &file_modelfile_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionFromEdge.ProtoReflect.Descriptor instead.
func (*RegionFromEdge) Descriptor() ([]byte, []int) {
	return file_modelfile_v1_proto_rawDescGZIP(), []int{0}
}

func (x *RegionFromEdge) GetLeft() float64 {
	if x != nil {
		return x.Left
	}
	return 0
}

func (x *RegionFromEdge) GetRight() float64 {
	if x != nil {
		return x.Right
	}
	return 0
}

func (x *RegionFromEdge) GetTop() float64 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *RegionFromEdge) GetBottom() float64 {
	if x != nil {
		return x.Bottom
	}
	return 0
}

type FeatureClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureUid  string  `protobuf:"bytes,1,opt,name=feature_uid,json=featureUid,proto3" json:"feature_uid,omitempty"`
	FeatureName string  `protobuf:"bytes,2,opt,name=feature_name,json=featureName,proto3" json:"feature_name,omitempty"`
	Color       []int32 `protobuf:"varint,3,rep,packed,name=color,proto3" json:"color,omitempty"`
	FeatureTag  string  `protobuf:"bytes,4,opt,name=feature_tag,json=featureTag,proto3" json:"feature_tag,omitempty"`
}

func (x *FeatureClass) Reset() {
	*x = FeatureClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modelfile_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureClass) ProtoMessage() {}

func (x *FeatureClass) ProtoReflect() protoreflect.Message {
	mi := &file_modelfile_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureClass.ProtoReflect.Descriptor instead.
func (*FeatureClass) Descriptor() ([]byte, []int) {
	return file_modelfile_v1_proto_rawDescGZIP(), []int{1}
}

func (x *FeatureClass) GetFeatureUid() string {
	if x != nil {
		return x.FeatureUid
	}
	return ""
}

func (x *FeatureClass) GetFeatureName() string {
	if x != nil {
		return x.FeatureName
	}
	return ""
}

func (x *FeatureClass) GetColor() []int32 {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *FeatureClass) GetFeatureTag() string {
	if x != nil {
		return x.FeatureTag
	}
	return ""
}

type InputField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label            string            `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Datatype         DataType          `protobuf:"varint,2,opt,name=datatype,proto3,enum=modelfile.v1.DataType" json:"datatype,omitempty"`
	ImageW           int32             `protobuf:"varint,3,opt,name=image_w,json=imageW,proto3" json:"image_w,omitempty"` // Expectations of network (image restrictions so that it runs without error)
	ImageH           int32             `protobuf:"varint,4,opt,name=image_h,json=imageH,proto3" json:"image_h,omitempty"`
	ImageC           int32             `protobuf:"varint,5,opt,name=image_c,json=imageC,proto3" json:"image_c,omitempty"`
	RegionOfInterest []*RegionFromEdge `protobuf:"bytes,6,rep,name=region_of_interest,json=regionOfInterest,proto3" json:"region_of_interest,omitempty"`
	TrainingImageW   int32             `protobuf:"varint,8,opt,name=training_image_w,json=trainingImageW,proto3" json:"training_image_w,omitempty"` // Image size with which the network has been trained
	TrainingImageH   int32             `protobuf:"varint,9,opt,name=training_image_h,json=trainingImageH,proto3" json:"training_image_h,omitempty"`
	TrainingImageC   int32             `protobuf:"varint,10,opt,name=training_image_c,json=trainingImageC,proto3" json:"training_image_c,omitempty"`
	MovingWindow     bool              `protobuf:"varint,11,opt,name=moving_window,json=movingWindow,proto3" json:"moving_window,omitempty"`
}

func (x *InputField) Reset() {
	*x = InputField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modelfile_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputField) ProtoMessage() {}

func (x *InputField) ProtoReflect() protoreflect.Message {
	mi := &file_modelfile_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputField.ProtoReflect.Descriptor instead.
func (*InputField) Descriptor() ([]byte, []int) {
	return file_modelfile_v1_proto_rawDescGZIP(), []int{2}
}

func (x *InputField) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *InputField) GetDatatype() DataType {
	if x != nil {
		return x.Datatype
	}
	return DataType_SCALAR_INT
}

func (x *InputField) GetImageW() int32 {
	if x != nil {
		return x.ImageW
	}
	return 0
}

func (x *InputField) GetImageH() int32 {
	if x != nil {
		return x.ImageH
	}
	return 0
}

func (x *InputField) GetImageC() int32 {
	if x != nil {
		return x.ImageC
	}
	return 0
}

func (x *InputField) GetRegionOfInterest() []*RegionFromEdge {
	if x != nil {
		return x.RegionOfInterest
	}
	return nil
}

func (x *InputField) GetTrainingImageW() int32 {
	if x != nil {
		return x.TrainingImageW
	}
	return 0
}

func (x *InputField) GetTrainingImageH() int32 {
	if x != nil {
		return x.TrainingImageH
	}
	return 0
}

func (x *InputField) GetTrainingImageC() int32 {
	if x != nil {
		return x.TrainingImageC
	}
	return 0
}

func (x *InputField) GetMovingWindow() bool {
	if x != nil {
		return x.MovingWindow
	}
	return false
}

type OcrFormatRestrictionBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfCharacters uint32 `protobuf:"varint,1,opt,name=number_of_characters,json=numberOfCharacters,proto3" json:"number_of_characters,omitempty"` // 0 -> unlimited, only allowed for last element of array
	AllowedCharacters  []byte `protobuf:"bytes,2,opt,name=allowed_characters,json=allowedCharacters,proto3" json:"allowed_characters,omitempty"`
}

func (x *OcrFormatRestrictionBlock) Reset() {
	*x = OcrFormatRestrictionBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modelfile_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OcrFormatRestrictionBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OcrFormatRestrictionBlock) ProtoMessage() {}

func (x *OcrFormatRestrictionBlock) ProtoReflect() protoreflect.Message {
	mi := &file_modelfile_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OcrFormatRestrictionBlock.ProtoReflect.Descriptor instead.
func (*OcrFormatRestrictionBlock) Descriptor() ([]byte, []int) {
	return file_modelfile_v1_proto_rawDescGZIP(), []int{3}
}

func (x *OcrFormatRestrictionBlock) GetNumberOfCharacters() uint32 {
	if x != nil {
		return x.NumberOfCharacters
	}
	return 0
}

func (x *OcrFormatRestrictionBlock) GetAllowedCharacters() []byte {
	if x != nil {
		return x.AllowedCharacters
	}
	return nil
}

type OutputField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label                 string                       `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Datatype              DataType                     `protobuf:"varint,2,opt,name=datatype,proto3,enum=modelfile.v1.DataType" json:"datatype,omitempty"`
	Color                 []int32                      `protobuf:"varint,3,rep,packed,name=color,proto3" json:"color,omitempty"`
	ImageW                int32                        `protobuf:"varint,4,opt,name=image_w,json=imageW,proto3" json:"image_w,omitempty"`
	ImageH                int32                        `protobuf:"varint,5,opt,name=image_h,json=imageH,proto3" json:"image_h,omitempty"`
	ImageC                int32                        `protobuf:"varint,6,opt,name=image_c,json=imageC,proto3" json:"image_c,omitempty"`
	Classes               []*FeatureClass              `protobuf:"bytes,7,rep,name=classes,proto3" json:"classes,omitempty"`
	MaxQueries            int32                        `protobuf:"varint,8,opt,name=max_queries,json=maxQueries,proto3" json:"max_queries,omitempty"`
	Charset               []byte                       `protobuf:"bytes,9,opt,name=charset,proto3" json:"charset,omitempty"`
	CharsetFilter         []byte                       `protobuf:"bytes,10,opt,name=charset_filter,json=charsetFilter,proto3" json:"charset_filter,omitempty"`
	OcrFormatRestrictions []*OcrFormatRestrictionBlock `protobuf:"bytes,11,rep,name=ocr_format_restrictions,json=ocrFormatRestrictions,proto3" json:"ocr_format_restrictions,omitempty"`
}

func (x *OutputField) Reset() {
	*x = OutputField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modelfile_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputField) ProtoMessage() {}

func (x *OutputField) ProtoReflect() protoreflect.Message {
	mi := &file_modelfile_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputField.ProtoReflect.Descriptor instead.
func (*OutputField) Descriptor() ([]byte, []int) {
	return file_modelfile_v1_proto_rawDescGZIP(), []int{4}
}

func (x *OutputField) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *OutputField) GetDatatype() DataType {
	if x != nil {
		return x.Datatype
	}
	return DataType_SCALAR_INT
}

func (x *OutputField) GetColor() []int32 {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *OutputField) GetImageW() int32 {
	if x != nil {
		return x.ImageW
	}
	return 0
}

func (x *OutputField) GetImageH() int32 {
	if x != nil {
		return x.ImageH
	}
	return 0
}

func (x *OutputField) GetImageC() int32 {
	if x != nil {
		return x.ImageC
	}
	return 0
}

func (x *OutputField) GetClasses() []*FeatureClass {
	if x != nil {
		return x.Classes
	}
	return nil
}

func (x *OutputField) GetMaxQueries() int32 {
	if x != nil {
		return x.MaxQueries
	}
	return 0
}

func (x *OutputField) GetCharset() []byte {
	if x != nil {
		return x.Charset
	}
	return nil
}

func (x *OutputField) GetCharsetFilter() []byte {
	if x != nil {
		return x.CharsetFilter
	}
	return nil
}

func (x *OutputField) GetOcrFormatRestrictions() []*OcrFormatRestrictionBlock {
	if x != nil {
		return x.OcrFormatRestrictions
	}
	return nil
}

type ModelFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion   string            `protobuf:"bytes,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	Model             []byte            `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	CompressionMethod CompressionMethod `protobuf:"varint,3,opt,name=compression_method,json=compressionMethod,proto3,enum=modelfile.v1.CompressionMethod" json:"compression_method,omitempty"`
	ModelHashBlake2B  string            `protobuf:"bytes,4,opt,name=model_hash_blake2b,json=modelHashBlake2b,proto3" json:"model_hash_blake2b,omitempty"`
	Input             []*InputField     `protobuf:"bytes,5,rep,name=input,proto3" json:"input,omitempty"`
	Output            []*OutputField    `protobuf:"bytes,6,rep,name=output,proto3" json:"output,omitempty"`
	Tenant            string            `protobuf:"bytes,7,opt,name=tenant,proto3" json:"tenant,omitempty"`
	ModelLabel        string            `protobuf:"bytes,8,opt,name=model_label,json=modelLabel,proto3" json:"model_label,omitempty"`
	ModelTag          string            `protobuf:"bytes,9,opt,name=model_tag,json=modelTag,proto3" json:"model_tag,omitempty"`
	ModelId           int32             `protobuf:"varint,10,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	CreationTimestamp int64             `protobuf:"varint,11,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	TenantId          string            `protobuf:"bytes,12,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	OnnxVersionMajor  int32             `protobuf:"varint,13,opt,name=onnx_version_major,json=onnxVersionMajor,proto3" json:"onnx_version_major,omitempty"`
	OnnxVersionMinor  int32             `protobuf:"varint,14,opt,name=onnx_version_minor,json=onnxVersionMinor,proto3" json:"onnx_version_minor,omitempty"`
	ModelUid          string            `protobuf:"bytes,15,opt,name=model_uid,json=modelUid,proto3" json:"model_uid,omitempty"`
	ModelTimestamp    int64             `protobuf:"varint,16,opt,name=model_timestamp,json=modelTimestamp,proto3" json:"model_timestamp,omitempty"`
	ModelType         ModelType         `protobuf:"varint,17,opt,name=model_type,json=modelType,proto3,enum=modelfile.v1.ModelType" json:"model_type,omitempty"`
	ModelOutputType   ModelOutputType   `protobuf:"varint,18,opt,name=model_output_type,json=modelOutputType,proto3,enum=modelfile.v1.ModelOutputType" json:"model_output_type,omitempty"`
	FileType          FileType          `protobuf:"varint,19,opt,name=file_type,json=fileType,proto3,enum=modelfile.v1.FileType" json:"file_type,omitempty"`
	Key               string            `protobuf:"bytes,20,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ModelFile) Reset() {
	*x = ModelFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modelfile_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelFile) ProtoMessage() {}

func (x *ModelFile) ProtoReflect() protoreflect.Message {
	mi := &file_modelfile_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelFile.ProtoReflect.Descriptor instead.
func (*ModelFile) Descriptor() ([]byte, []int) {
	return file_modelfile_v1_proto_rawDescGZIP(), []int{5}
}

func (x *ModelFile) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *ModelFile) GetModel() []byte {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *ModelFile) GetCompressionMethod() CompressionMethod {
	if x != nil {
		return x.CompressionMethod
	}
	return CompressionMethod_NONE
}

func (x *ModelFile) GetModelHashBlake2B() string {
	if x != nil {
		return x.ModelHashBlake2B
	}
	return ""
}

func (x *ModelFile) GetInput() []*InputField {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ModelFile) GetOutput() []*OutputField {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ModelFile) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *ModelFile) GetModelLabel() string {
	if x != nil {
		return x.ModelLabel
	}
	return ""
}

func (x *ModelFile) GetModelTag() string {
	if x != nil {
		return x.ModelTag
	}
	return ""
}

func (x *ModelFile) GetModelId() int32 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *ModelFile) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *ModelFile) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ModelFile) GetOnnxVersionMajor() int32 {
	if x != nil {
		return x.OnnxVersionMajor
	}
	return 0
}

func (x *ModelFile) GetOnnxVersionMinor() int32 {
	if x != nil {
		return x.OnnxVersionMinor
	}
	return 0
}

func (x *ModelFile) GetModelUid() string {
	if x != nil {
		return x.ModelUid
	}
	return ""
}

func (x *ModelFile) GetModelTimestamp() int64 {
	if x != nil {
		return x.ModelTimestamp
	}
	return 0
}

func (x *ModelFile) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_REGULAR
}

func (x *ModelFile) GetModelOutputType() ModelOutputType {
	if x != nil {
		return x.ModelOutputType
	}
	return ModelOutputType_TYPE_UNKNOWN
}

func (x *ModelFile) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_FT_MODEL
}

func (x *ModelFile) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_modelfile_v1_proto protoreflect.FileDescriptor

var file_modelfile_v1_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x22, 0x64, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d,
	0x45, 0x64, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x6f, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x22, 0x89, 0x01, 0x0a, 0x0c, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74,
	0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x61, 0x67, 0x22, 0x90, 0x03, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x12, 0x4a, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x64,
	0x67, 0x65, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x43, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x6f, 0x76, 0x69, 0x6e,
	0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x7c, 0x0a, 0x19, 0x4f, 0x63, 0x72, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x73, 0x22, 0xb1, 0x03, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43,
	0x12, 0x34, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73,
	0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x73,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x17, 0x6f, 0x63, 0x72, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x63, 0x72, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x15, 0x6f, 0x63, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd6, 0x06, 0x0a, 0x09, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x4e, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x62, 0x6c, 0x61, 0x6b, 0x65, 0x32, 0x62, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x42,
	0x6c, 0x61, 0x6b, 0x65, 0x32, 0x62, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x6e, 0x6e, 0x78, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6f, 0x6e, 0x6e, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x6a, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x6e, 0x6e, 0x78, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x6f, 0x6e, 0x6e, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e,
	0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x49, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x2a, 0x3f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x46, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x46, 0x54, 0x5f, 0x56, 0x49, 0x5a, 0x49, 0x4f, 0x54, 0x49, 0x58, 0x5f, 0x4b, 0x45, 0x59, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x54, 0x5f, 0x5a, 0x58, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45,
	0x59, 0x10, 0x02, 0x2a, 0x44, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x5a, 0x49, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x5a, 0x4c, 0x49, 0x42, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x5a, 0x4d, 0x41, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x5a, 0x32, 0x10, 0x04, 0x2a, 0xea, 0x02, 0x0a, 0x08, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52,
	0x5f, 0x49, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52,
	0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4d, 0x41, 0x47,
	0x45, 0x5f, 0x52, 0x41, 0x57, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x57, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4e, 0x47, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4a, 0x50, 0x47, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x49, 0x46, 0x10, 0x06, 0x12, 0x15, 0x0a,
	0x11, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x4f, 0x58, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x42, 0x4f, 0x58, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x4f, 0x58, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x45,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f,
	0x52, 0x45, 0x53, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x47,
	0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x52, 0x43,
	0x4f, 0x44, 0x45, 0x53, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x42, 0x4f, 0x58, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46,
	0x5f, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x26,
	0x0a, 0x22, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x4f, 0x58, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x2a, 0x2d, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0xbd, 0x02, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x4e, 0x4f, 0x4d, 0x41, 0x4c, 0x59, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x47, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x41, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x10, 0x07, 0x12, 0x2a, 0x0a,
	0x26, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x4f, 0x52, 0x49, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x09, 0x42, 0x35, 0x5a, 0x19, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x66, 0x69, 0x6c, 0x65, 0x2f,
	0x76, 0x31, 0xaa, 0x02, 0x17, 0x44, 0x45, 0x4e, 0x4b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_modelfile_v1_proto_rawDescOnce sync.Once
	file_modelfile_v1_proto_rawDescData = file_modelfile_v1_proto_rawDesc
)

func file_modelfile_v1_proto_rawDescGZIP() []byte {
	file_modelfile_v1_proto_rawDescOnce.Do(func() {
		file_modelfile_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_modelfile_v1_proto_rawDescData)
	})
	return file_modelfile_v1_proto_rawDescData
}

var file_modelfile_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_modelfile_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_modelfile_v1_proto_goTypes = []interface{}{
	(FileType)(0),                     // 0: modelfile.v1.FileType
	(CompressionMethod)(0),            // 1: modelfile.v1.CompressionMethod
	(DataType)(0),                     // 2: modelfile.v1.DataType
	(ModelType)(0),                    // 3: modelfile.v1.ModelType
	(ModelOutputType)(0),              // 4: modelfile.v1.ModelOutputType
	(*RegionFromEdge)(nil),            // 5: modelfile.v1.RegionFromEdge
	(*FeatureClass)(nil),              // 6: modelfile.v1.FeatureClass
	(*InputField)(nil),                // 7: modelfile.v1.InputField
	(*OcrFormatRestrictionBlock)(nil), // 8: modelfile.v1.OcrFormatRestrictionBlock
	(*OutputField)(nil),               // 9: modelfile.v1.OutputField
	(*ModelFile)(nil),                 // 10: modelfile.v1.ModelFile
}
var file_modelfile_v1_proto_depIdxs = []int32{
	2,  // 0: modelfile.v1.InputField.datatype:type_name -> modelfile.v1.DataType
	5,  // 1: modelfile.v1.InputField.region_of_interest:type_name -> modelfile.v1.RegionFromEdge
	2,  // 2: modelfile.v1.OutputField.datatype:type_name -> modelfile.v1.DataType
	6,  // 3: modelfile.v1.OutputField.classes:type_name -> modelfile.v1.FeatureClass
	8,  // 4: modelfile.v1.OutputField.ocr_format_restrictions:type_name -> modelfile.v1.OcrFormatRestrictionBlock
	1,  // 5: modelfile.v1.ModelFile.compression_method:type_name -> modelfile.v1.CompressionMethod
	7,  // 6: modelfile.v1.ModelFile.input:type_name -> modelfile.v1.InputField
	9,  // 7: modelfile.v1.ModelFile.output:type_name -> modelfile.v1.OutputField
	3,  // 8: modelfile.v1.ModelFile.model_type:type_name -> modelfile.v1.ModelType
	4,  // 9: modelfile.v1.ModelFile.model_output_type:type_name -> modelfile.v1.ModelOutputType
	0,  // 10: modelfile.v1.ModelFile.file_type:type_name -> modelfile.v1.FileType
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_modelfile_v1_proto_init() }
func file_modelfile_v1_proto_init() {
	if File_modelfile_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_modelfile_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionFromEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modelfile_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modelfile_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modelfile_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OcrFormatRestrictionBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modelfile_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modelfile_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_modelfile_v1_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_modelfile_v1_proto_goTypes,
		DependencyIndexes: file_modelfile_v1_proto_depIdxs,
		EnumInfos:         file_modelfile_v1_proto_enumTypes,
		MessageInfos:      file_modelfile_v1_proto_msgTypes,
	}.Build()
	File_modelfile_v1_proto = out.File
	file_modelfile_v1_proto_rawDesc = nil
	file_modelfile_v1_proto_goTypes = nil
	file_modelfile_v1_proto_depIdxs = nil
}
