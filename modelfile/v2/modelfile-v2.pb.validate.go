// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: modelfile-v2.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ModelFile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelFile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelFileMultiError, or nil
// if none found.
func (m *ModelFile) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProtocolVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelFileValidationError{
					field:  "ProtocolVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelFileValidationError{
					field:  "ProtocolVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelFileValidationError{
				field:  "ProtocolVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	if all {
		switch v := interface{}(m.GetFileInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelFileValidationError{
					field:  "FileInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelFileValidationError{
					field:  "FileInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelFileValidationError{
				field:  "FileInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelFileValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelFileValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelFileValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetClassLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelFileValidationError{
						field:  fmt.Sprintf("ClassLabels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelFileValidationError{
						field:  fmt.Sprintf("ClassLabels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelFileValidationError{
					field:  fmt.Sprintf("ClassLabels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelFileValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelFileValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelFileValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelFileValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelFileValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelFileValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetAdditionalContent()))
		i := 0
		for key := range m.GetAdditionalContent() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAdditionalContent()[key]
			_ = val

			// no validation rules for AdditionalContent[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ModelFileValidationError{
							field:  fmt.Sprintf("AdditionalContent[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ModelFileValidationError{
							field:  fmt.Sprintf("AdditionalContent[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ModelFileValidationError{
						field:  fmt.Sprintf("AdditionalContent[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ModelFileMultiError(errors)
	}

	return nil
}

// ModelFileMultiError is an error wrapping multiple validation errors returned
// by ModelFile.ValidateAll() if the designated constraints aren't met.
type ModelFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFileMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFileMultiError) AllErrors() []error { return m }

// ModelFileValidationError is the validation error returned by
// ModelFile.Validate if the designated constraints aren't met.
type ModelFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFileValidationError) ErrorName() string { return "ModelFileValidationError" }

// Error satisfies the builtin error interface
func (e ModelFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFileValidationError{}

// Validate checks the field values on ModelFile_Version with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ModelFile_Version) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelFile_Version with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModelFile_VersionMultiError, or nil if none found.
func (m *ModelFile_Version) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile_Version) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Major

	// no validation rules for Minor

	// no validation rules for Patch

	if len(errors) > 0 {
		return ModelFile_VersionMultiError(errors)
	}

	return nil
}

// ModelFile_VersionMultiError is an error wrapping multiple validation errors
// returned by ModelFile_Version.ValidateAll() if the designated constraints
// aren't met.
type ModelFile_VersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFile_VersionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFile_VersionMultiError) AllErrors() []error { return m }

// ModelFile_VersionValidationError is the validation error returned by
// ModelFile_Version.Validate if the designated constraints aren't met.
type ModelFile_VersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFile_VersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFile_VersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFile_VersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFile_VersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFile_VersionValidationError) ErrorName() string {
	return "ModelFile_VersionValidationError"
}

// Error satisfies the builtin error interface
func (e ModelFile_VersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile_Version.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFile_VersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFile_VersionValidationError{}

// Validate checks the field values on ModelFile_Content with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ModelFile_Content) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelFile_Content with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModelFile_ContentMultiError, or nil if none found.
func (m *ModelFile_Content) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile_Content) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ByteContent

	// no validation rules for HashSha256

	// no validation rules for CompressionMethod

	// no validation rules for EncryptionMethod

	{
		sorted_keys := make([]string, len(m.GetKeySlots()))
		i := 0
		for key := range m.GetKeySlots() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetKeySlots()[key]
			_ = val

			// no validation rules for KeySlots[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ModelFile_ContentValidationError{
							field:  fmt.Sprintf("KeySlots[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ModelFile_ContentValidationError{
							field:  fmt.Sprintf("KeySlots[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ModelFile_ContentValidationError{
						field:  fmt.Sprintf("KeySlots[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ModelFile_ContentMultiError(errors)
	}

	return nil
}

// ModelFile_ContentMultiError is an error wrapping multiple validation errors
// returned by ModelFile_Content.ValidateAll() if the designated constraints
// aren't met.
type ModelFile_ContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFile_ContentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFile_ContentMultiError) AllErrors() []error { return m }

// ModelFile_ContentValidationError is the validation error returned by
// ModelFile_Content.Validate if the designated constraints aren't met.
type ModelFile_ContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFile_ContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFile_ContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFile_ContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFile_ContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFile_ContentValidationError) ErrorName() string {
	return "ModelFile_ContentValidationError"
}

// Error satisfies the builtin error interface
func (e ModelFile_ContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile_Content.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFile_ContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFile_ContentValidationError{}

// Validate checks the field values on ModelFile_ClassLabel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModelFile_ClassLabel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelFile_ClassLabel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModelFile_ClassLabelMultiError, or nil if none found.
func (m *ModelFile_ClassLabel) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile_ClassLabel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClassLabelId

	// no validation rules for Name

	// no validation rules for ShortName

	// no validation rules for Color

	if len(errors) > 0 {
		return ModelFile_ClassLabelMultiError(errors)
	}

	return nil
}

// ModelFile_ClassLabelMultiError is an error wrapping multiple validation
// errors returned by ModelFile_ClassLabel.ValidateAll() if the designated
// constraints aren't met.
type ModelFile_ClassLabelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFile_ClassLabelMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFile_ClassLabelMultiError) AllErrors() []error { return m }

// ModelFile_ClassLabelValidationError is the validation error returned by
// ModelFile_ClassLabel.Validate if the designated constraints aren't met.
type ModelFile_ClassLabelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFile_ClassLabelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFile_ClassLabelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFile_ClassLabelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFile_ClassLabelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFile_ClassLabelValidationError) ErrorName() string {
	return "ModelFile_ClassLabelValidationError"
}

// Error satisfies the builtin error interface
func (e ModelFile_ClassLabelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile_ClassLabel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFile_ClassLabelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFile_ClassLabelValidationError{}

// Validate checks the field values on ModelFile_ImageSize with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModelFile_ImageSize) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelFile_ImageSize with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModelFile_ImageSizeMultiError, or nil if none found.
func (m *ModelFile_ImageSize) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile_ImageSize) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Width

	// no validation rules for Height

	// no validation rules for Channels

	if len(errors) > 0 {
		return ModelFile_ImageSizeMultiError(errors)
	}

	return nil
}

// ModelFile_ImageSizeMultiError is an error wrapping multiple validation
// errors returned by ModelFile_ImageSize.ValidateAll() if the designated
// constraints aren't met.
type ModelFile_ImageSizeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFile_ImageSizeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFile_ImageSizeMultiError) AllErrors() []error { return m }

// ModelFile_ImageSizeValidationError is the validation error returned by
// ModelFile_ImageSize.Validate if the designated constraints aren't met.
type ModelFile_ImageSizeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFile_ImageSizeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFile_ImageSizeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFile_ImageSizeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFile_ImageSizeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFile_ImageSizeValidationError) ErrorName() string {
	return "ModelFile_ImageSizeValidationError"
}

// Error satisfies the builtin error interface
func (e ModelFile_ImageSizeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile_ImageSize.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFile_ImageSizeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFile_ImageSizeValidationError{}

// Validate checks the field values on ModelFile_RegionFromEdge with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModelFile_RegionFromEdge) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelFile_RegionFromEdge with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModelFile_RegionFromEdgeMultiError, or nil if none found.
func (m *ModelFile_RegionFromEdge) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile_RegionFromEdge) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Left

	// no validation rules for Right

	// no validation rules for Top

	// no validation rules for Bottom

	if len(errors) > 0 {
		return ModelFile_RegionFromEdgeMultiError(errors)
	}

	return nil
}

// ModelFile_RegionFromEdgeMultiError is an error wrapping multiple validation
// errors returned by ModelFile_RegionFromEdge.ValidateAll() if the designated
// constraints aren't met.
type ModelFile_RegionFromEdgeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFile_RegionFromEdgeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFile_RegionFromEdgeMultiError) AllErrors() []error { return m }

// ModelFile_RegionFromEdgeValidationError is the validation error returned by
// ModelFile_RegionFromEdge.Validate if the designated constraints aren't met.
type ModelFile_RegionFromEdgeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFile_RegionFromEdgeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFile_RegionFromEdgeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFile_RegionFromEdgeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFile_RegionFromEdgeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFile_RegionFromEdgeValidationError) ErrorName() string {
	return "ModelFile_RegionFromEdgeValidationError"
}

// Error satisfies the builtin error interface
func (e ModelFile_RegionFromEdgeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile_RegionFromEdge.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFile_RegionFromEdgeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFile_RegionFromEdgeValidationError{}

// Validate checks the field values on ModelFile_Input with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ModelFile_Input) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelFile_Input with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModelFile_InputMultiError, or nil if none found.
func (m *ModelFile_Input) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile_Input) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.FormatInformation.(type) {
	case *ModelFile_Input_ImageFormat:
		if v == nil {
			err := ModelFile_InputValidationError{
				field:  "FormatInformation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetImageFormat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelFile_InputValidationError{
						field:  "ImageFormat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelFile_InputValidationError{
						field:  "ImageFormat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetImageFormat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelFile_InputValidationError{
					field:  "ImageFormat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ModelFile_InputMultiError(errors)
	}

	return nil
}

// ModelFile_InputMultiError is an error wrapping multiple validation errors
// returned by ModelFile_Input.ValidateAll() if the designated constraints
// aren't met.
type ModelFile_InputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFile_InputMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFile_InputMultiError) AllErrors() []error { return m }

// ModelFile_InputValidationError is the validation error returned by
// ModelFile_Input.Validate if the designated constraints aren't met.
type ModelFile_InputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFile_InputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFile_InputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFile_InputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFile_InputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFile_InputValidationError) ErrorName() string { return "ModelFile_InputValidationError" }

// Error satisfies the builtin error interface
func (e ModelFile_InputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile_Input.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFile_InputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFile_InputValidationError{}

// Validate checks the field values on ModelFile_Output with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ModelFile_Output) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelFile_Output with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModelFile_OutputMultiError, or nil if none found.
func (m *ModelFile_Output) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile_Output) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.FormatInformation.(type) {
	case *ModelFile_Output_ImageClassifiersFormat:
		if v == nil {
			err := ModelFile_OutputValidationError{
				field:  "FormatInformation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetImageClassifiersFormat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelFile_OutputValidationError{
						field:  "ImageClassifiersFormat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelFile_OutputValidationError{
						field:  "ImageClassifiersFormat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetImageClassifiersFormat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelFile_OutputValidationError{
					field:  "ImageClassifiersFormat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ModelFile_Output_SegmentationMapsFormat:
		if v == nil {
			err := ModelFile_OutputValidationError{
				field:  "FormatInformation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSegmentationMapsFormat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelFile_OutputValidationError{
						field:  "SegmentationMapsFormat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelFile_OutputValidationError{
						field:  "SegmentationMapsFormat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSegmentationMapsFormat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelFile_OutputValidationError{
					field:  "SegmentationMapsFormat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ModelFile_Output_BoundingBoxesFormat:
		if v == nil {
			err := ModelFile_OutputValidationError{
				field:  "FormatInformation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBoundingBoxesFormat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelFile_OutputValidationError{
						field:  "BoundingBoxesFormat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelFile_OutputValidationError{
						field:  "BoundingBoxesFormat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBoundingBoxesFormat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelFile_OutputValidationError{
					field:  "BoundingBoxesFormat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ModelFile_Output_BoundingBoxSegmentationsFormat:
		if v == nil {
			err := ModelFile_OutputValidationError{
				field:  "FormatInformation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBoundingBoxSegmentationsFormat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelFile_OutputValidationError{
						field:  "BoundingBoxSegmentationsFormat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelFile_OutputValidationError{
						field:  "BoundingBoxSegmentationsFormat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBoundingBoxSegmentationsFormat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelFile_OutputValidationError{
					field:  "BoundingBoxSegmentationsFormat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ModelFile_Output_OcrFormat:
		if v == nil {
			err := ModelFile_OutputValidationError{
				field:  "FormatInformation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOcrFormat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelFile_OutputValidationError{
						field:  "OcrFormat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelFile_OutputValidationError{
						field:  "OcrFormat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOcrFormat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelFile_OutputValidationError{
					field:  "OcrFormat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ModelFile_OutputMultiError(errors)
	}

	return nil
}

// ModelFile_OutputMultiError is an error wrapping multiple validation errors
// returned by ModelFile_Output.ValidateAll() if the designated constraints
// aren't met.
type ModelFile_OutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFile_OutputMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFile_OutputMultiError) AllErrors() []error { return m }

// ModelFile_OutputValidationError is the validation error returned by
// ModelFile_Output.Validate if the designated constraints aren't met.
type ModelFile_OutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFile_OutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFile_OutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFile_OutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFile_OutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFile_OutputValidationError) ErrorName() string { return "ModelFile_OutputValidationError" }

// Error satisfies the builtin error interface
func (e ModelFile_OutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile_Output.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFile_OutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFile_OutputValidationError{}

// Validate checks the field values on ModelFile_FileInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModelFile_FileInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelFile_FileInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModelFile_FileInfoMultiError, or nil if none found.
func (m *ModelFile_FileInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile_FileInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileType

	// no validation rules for NetworkName

	// no validation rules for NetworkId

	// no validation rules for NetworkExperimentId

	// no validation rules for NetworkSnapshotId

	// no validation rules for NetworkType

	// no validation rules for NetworkFlavor

	if all {
		switch v := interface{}(m.GetNetworkVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelFile_FileInfoValidationError{
					field:  "NetworkVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelFile_FileInfoValidationError{
					field:  "NetworkVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNetworkVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelFile_FileInfoValidationError{
				field:  "NetworkVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRuntimeVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelFile_FileInfoValidationError{
					field:  "RuntimeVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelFile_FileInfoValidationError{
					field:  "RuntimeVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRuntimeVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelFile_FileInfoValidationError{
				field:  "RuntimeVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Precision

	if all {
		switch v := interface{}(m.GetMinimumLibdenkflowVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelFile_FileInfoValidationError{
					field:  "MinimumLibdenkflowVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelFile_FileInfoValidationError{
					field:  "MinimumLibdenkflowVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinimumLibdenkflowVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelFile_FileInfoValidationError{
				field:  "MinimumLibdenkflowVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for HardwareTarget

	if len(errors) > 0 {
		return ModelFile_FileInfoMultiError(errors)
	}

	return nil
}

// ModelFile_FileInfoMultiError is an error wrapping multiple validation errors
// returned by ModelFile_FileInfo.ValidateAll() if the designated constraints
// aren't met.
type ModelFile_FileInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFile_FileInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFile_FileInfoMultiError) AllErrors() []error { return m }

// ModelFile_FileInfoValidationError is the validation error returned by
// ModelFile_FileInfo.Validate if the designated constraints aren't met.
type ModelFile_FileInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFile_FileInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFile_FileInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFile_FileInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFile_FileInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFile_FileInfoValidationError) ErrorName() string {
	return "ModelFile_FileInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ModelFile_FileInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile_FileInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFile_FileInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFile_FileInfoValidationError{}

// Validate checks the field values on ModelFile_Content_KeySlot with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModelFile_Content_KeySlot) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelFile_Content_KeySlot with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModelFile_Content_KeySlotMultiError, or nil if none found.
func (m *ModelFile_Content_KeySlot) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile_Content_KeySlot) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WrappedKey

	// no validation rules for WrappingMethod

	if len(errors) > 0 {
		return ModelFile_Content_KeySlotMultiError(errors)
	}

	return nil
}

// ModelFile_Content_KeySlotMultiError is an error wrapping multiple validation
// errors returned by ModelFile_Content_KeySlot.ValidateAll() if the
// designated constraints aren't met.
type ModelFile_Content_KeySlotMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFile_Content_KeySlotMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFile_Content_KeySlotMultiError) AllErrors() []error { return m }

// ModelFile_Content_KeySlotValidationError is the validation error returned by
// ModelFile_Content_KeySlot.Validate if the designated constraints aren't met.
type ModelFile_Content_KeySlotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFile_Content_KeySlotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFile_Content_KeySlotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFile_Content_KeySlotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFile_Content_KeySlotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFile_Content_KeySlotValidationError) ErrorName() string {
	return "ModelFile_Content_KeySlotValidationError"
}

// Error satisfies the builtin error interface
func (e ModelFile_Content_KeySlotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile_Content_KeySlot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFile_Content_KeySlotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFile_Content_KeySlotValidationError{}

// Validate checks the field values on ModelFile_Input_ImageInputFormat with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ModelFile_Input_ImageInputFormat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelFile_Input_ImageInputFormat with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ModelFile_Input_ImageInputFormatMultiError, or nil if none found.
func (m *ModelFile_Input_ImageInputFormat) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile_Input_ImageInputFormat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRegionOfInterest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelFile_Input_ImageInputFormatValidationError{
					field:  "RegionOfInterest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelFile_Input_ImageInputFormatValidationError{
					field:  "RegionOfInterest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegionOfInterest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelFile_Input_ImageInputFormatValidationError{
				field:  "RegionOfInterest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.ImageSizeRequirements.(type) {
	case *ModelFile_Input_ImageInputFormat_ExactImageSize:
		if v == nil {
			err := ModelFile_Input_ImageInputFormatValidationError{
				field:  "ImageSizeRequirements",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExactImageSize()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelFile_Input_ImageInputFormatValidationError{
						field:  "ExactImageSize",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelFile_Input_ImageInputFormatValidationError{
						field:  "ExactImageSize",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExactImageSize()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelFile_Input_ImageInputFormatValidationError{
					field:  "ExactImageSize",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ModelFile_Input_ImageInputFormat_DivisibleImageSize:
		if v == nil {
			err := ModelFile_Input_ImageInputFormatValidationError{
				field:  "ImageSizeRequirements",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDivisibleImageSize()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelFile_Input_ImageInputFormatValidationError{
						field:  "DivisibleImageSize",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelFile_Input_ImageInputFormatValidationError{
						field:  "DivisibleImageSize",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDivisibleImageSize()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelFile_Input_ImageInputFormatValidationError{
					field:  "DivisibleImageSize",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ModelFile_Input_ImageInputFormatMultiError(errors)
	}

	return nil
}

// ModelFile_Input_ImageInputFormatMultiError is an error wrapping multiple
// validation errors returned by
// ModelFile_Input_ImageInputFormat.ValidateAll() if the designated
// constraints aren't met.
type ModelFile_Input_ImageInputFormatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFile_Input_ImageInputFormatMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFile_Input_ImageInputFormatMultiError) AllErrors() []error { return m }

// ModelFile_Input_ImageInputFormatValidationError is the validation error
// returned by ModelFile_Input_ImageInputFormat.Validate if the designated
// constraints aren't met.
type ModelFile_Input_ImageInputFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFile_Input_ImageInputFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFile_Input_ImageInputFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFile_Input_ImageInputFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFile_Input_ImageInputFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFile_Input_ImageInputFormatValidationError) ErrorName() string {
	return "ModelFile_Input_ImageInputFormatValidationError"
}

// Error satisfies the builtin error interface
func (e ModelFile_Input_ImageInputFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile_Input_ImageInputFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFile_Input_ImageInputFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFile_Input_ImageInputFormatValidationError{}

// Validate checks the field values on
// ModelFile_Input_ImageInputFormat_ExactImageSizeRequirement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModelFile_Input_ImageInputFormat_ExactImageSizeRequirement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ModelFile_Input_ImageInputFormat_ExactImageSizeRequirement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementMultiError, or
// nil if none found.
func (m *ModelFile_Input_ImageInputFormat_ExactImageSizeRequirement) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile_Input_ImageInputFormat_ExactImageSizeRequirement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetImageSize()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementValidationError{
					field:  "ImageSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementValidationError{
					field:  "ImageSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImageSize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementValidationError{
				field:  "ImageSize",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementMultiError(errors)
	}

	return nil
}

// ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementMultiError is an
// error wrapping multiple validation errors returned by
// ModelFile_Input_ImageInputFormat_ExactImageSizeRequirement.ValidateAll() if
// the designated constraints aren't met.
type ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementMultiError) AllErrors() []error {
	return m
}

// ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementValidationError is
// the validation error returned by
// ModelFile_Input_ImageInputFormat_ExactImageSizeRequirement.Validate if the
// designated constraints aren't met.
type ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementValidationError) ErrorName() string {
	return "ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementValidationError"
}

// Error satisfies the builtin error interface
func (e ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile_Input_ImageInputFormat_ExactImageSizeRequirement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFile_Input_ImageInputFormat_ExactImageSizeRequirementValidationError{}

// Validate checks the field values on
// ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirement with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirement with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementMultiError,
// or nil if none found.
func (m *ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirement) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetImageSizeDivisors()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError{
					field:  "ImageSizeDivisors",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError{
					field:  "ImageSizeDivisors",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImageSizeDivisors()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError{
				field:  "ImageSizeDivisors",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinimumImageSize()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError{
					field:  "MinimumImageSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError{
					field:  "MinimumImageSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinimumImageSize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError{
				field:  "MinimumImageSize",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSuggestedImageSize()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError{
					field:  "SuggestedImageSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError{
					field:  "SuggestedImageSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuggestedImageSize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError{
				field:  "SuggestedImageSize",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementMultiError(errors)
	}

	return nil
}

// ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementMultiError is
// an error wrapping multiple validation errors returned by
// ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirement.ValidateAll()
// if the designated constraints aren't met.
type ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementMultiError) AllErrors() []error {
	return m
}

// ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError
// is the validation error returned by
// ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirement.Validate if
// the designated constraints aren't met.
type ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError) ErrorName() string {
	return "ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError"
}

// Error satisfies the builtin error interface
func (e ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFile_Input_ImageInputFormat_DivisibleImageSizeRequirementValidationError{}

// Validate checks the field values on
// ModelFile_Output_ImageClassifiersOutputFormat with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelFile_Output_ImageClassifiersOutputFormat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ModelFile_Output_ImageClassifiersOutputFormat with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ModelFile_Output_ImageClassifiersOutputFormatMultiError, or nil if none found.
func (m *ModelFile_Output_ImageClassifiersOutputFormat) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile_Output_ImageClassifiersOutputFormat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ModelFile_Output_ImageClassifiersOutputFormatMultiError(errors)
	}

	return nil
}

// ModelFile_Output_ImageClassifiersOutputFormatMultiError is an error wrapping
// multiple validation errors returned by
// ModelFile_Output_ImageClassifiersOutputFormat.ValidateAll() if the
// designated constraints aren't met.
type ModelFile_Output_ImageClassifiersOutputFormatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFile_Output_ImageClassifiersOutputFormatMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFile_Output_ImageClassifiersOutputFormatMultiError) AllErrors() []error { return m }

// ModelFile_Output_ImageClassifiersOutputFormatValidationError is the
// validation error returned by
// ModelFile_Output_ImageClassifiersOutputFormat.Validate if the designated
// constraints aren't met.
type ModelFile_Output_ImageClassifiersOutputFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFile_Output_ImageClassifiersOutputFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFile_Output_ImageClassifiersOutputFormatValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ModelFile_Output_ImageClassifiersOutputFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFile_Output_ImageClassifiersOutputFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFile_Output_ImageClassifiersOutputFormatValidationError) ErrorName() string {
	return "ModelFile_Output_ImageClassifiersOutputFormatValidationError"
}

// Error satisfies the builtin error interface
func (e ModelFile_Output_ImageClassifiersOutputFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile_Output_ImageClassifiersOutputFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFile_Output_ImageClassifiersOutputFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFile_Output_ImageClassifiersOutputFormatValidationError{}

// Validate checks the field values on
// ModelFile_Output_SegmentationMapsOutputFormat with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelFile_Output_SegmentationMapsOutputFormat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ModelFile_Output_SegmentationMapsOutputFormat with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ModelFile_Output_SegmentationMapsOutputFormatMultiError, or nil if none found.
func (m *ModelFile_Output_SegmentationMapsOutputFormat) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile_Output_SegmentationMapsOutputFormat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetImageSize()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelFile_Output_SegmentationMapsOutputFormatValidationError{
					field:  "ImageSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelFile_Output_SegmentationMapsOutputFormatValidationError{
					field:  "ImageSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImageSize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelFile_Output_SegmentationMapsOutputFormatValidationError{
				field:  "ImageSize",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModelFile_Output_SegmentationMapsOutputFormatMultiError(errors)
	}

	return nil
}

// ModelFile_Output_SegmentationMapsOutputFormatMultiError is an error wrapping
// multiple validation errors returned by
// ModelFile_Output_SegmentationMapsOutputFormat.ValidateAll() if the
// designated constraints aren't met.
type ModelFile_Output_SegmentationMapsOutputFormatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFile_Output_SegmentationMapsOutputFormatMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFile_Output_SegmentationMapsOutputFormatMultiError) AllErrors() []error { return m }

// ModelFile_Output_SegmentationMapsOutputFormatValidationError is the
// validation error returned by
// ModelFile_Output_SegmentationMapsOutputFormat.Validate if the designated
// constraints aren't met.
type ModelFile_Output_SegmentationMapsOutputFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFile_Output_SegmentationMapsOutputFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFile_Output_SegmentationMapsOutputFormatValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ModelFile_Output_SegmentationMapsOutputFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFile_Output_SegmentationMapsOutputFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFile_Output_SegmentationMapsOutputFormatValidationError) ErrorName() string {
	return "ModelFile_Output_SegmentationMapsOutputFormatValidationError"
}

// Error satisfies the builtin error interface
func (e ModelFile_Output_SegmentationMapsOutputFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile_Output_SegmentationMapsOutputFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFile_Output_SegmentationMapsOutputFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFile_Output_SegmentationMapsOutputFormatValidationError{}

// Validate checks the field values on
// ModelFile_Output_BoundingBoxesOutputFormat with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelFile_Output_BoundingBoxesOutputFormat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ModelFile_Output_BoundingBoxesOutputFormat with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ModelFile_Output_BoundingBoxesOutputFormatMultiError, or nil if none found.
func (m *ModelFile_Output_BoundingBoxesOutputFormat) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile_Output_BoundingBoxesOutputFormat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumberOfBoxes

	// no validation rules for Stride

	// no validation rules for X1Offset

	// no validation rules for Y1Offset

	// no validation rules for X2Offset

	// no validation rules for Y2Offset

	// no validation rules for ConfidenceOffset

	// no validation rules for ClassLabelIndexOffset

	// no validation rules for BatchIndexOffset

	if len(errors) > 0 {
		return ModelFile_Output_BoundingBoxesOutputFormatMultiError(errors)
	}

	return nil
}

// ModelFile_Output_BoundingBoxesOutputFormatMultiError is an error wrapping
// multiple validation errors returned by
// ModelFile_Output_BoundingBoxesOutputFormat.ValidateAll() if the designated
// constraints aren't met.
type ModelFile_Output_BoundingBoxesOutputFormatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFile_Output_BoundingBoxesOutputFormatMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFile_Output_BoundingBoxesOutputFormatMultiError) AllErrors() []error { return m }

// ModelFile_Output_BoundingBoxesOutputFormatValidationError is the validation
// error returned by ModelFile_Output_BoundingBoxesOutputFormat.Validate if
// the designated constraints aren't met.
type ModelFile_Output_BoundingBoxesOutputFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFile_Output_BoundingBoxesOutputFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFile_Output_BoundingBoxesOutputFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFile_Output_BoundingBoxesOutputFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFile_Output_BoundingBoxesOutputFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFile_Output_BoundingBoxesOutputFormatValidationError) ErrorName() string {
	return "ModelFile_Output_BoundingBoxesOutputFormatValidationError"
}

// Error satisfies the builtin error interface
func (e ModelFile_Output_BoundingBoxesOutputFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile_Output_BoundingBoxesOutputFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFile_Output_BoundingBoxesOutputFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFile_Output_BoundingBoxesOutputFormatValidationError{}

// Validate checks the field values on
// ModelFile_Output_BoundingBoxSegmentationsOutputFormat with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModelFile_Output_BoundingBoxSegmentationsOutputFormat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ModelFile_Output_BoundingBoxSegmentationsOutputFormat with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModelFile_Output_BoundingBoxSegmentationsOutputFormatMultiError, or nil if
// none found.
func (m *ModelFile_Output_BoundingBoxSegmentationsOutputFormat) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile_Output_BoundingBoxSegmentationsOutputFormat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetImageSize()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelFile_Output_BoundingBoxSegmentationsOutputFormatValidationError{
					field:  "ImageSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelFile_Output_BoundingBoxSegmentationsOutputFormatValidationError{
					field:  "ImageSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImageSize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelFile_Output_BoundingBoxSegmentationsOutputFormatValidationError{
				field:  "ImageSize",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RelativeToBoundingBox

	if len(errors) > 0 {
		return ModelFile_Output_BoundingBoxSegmentationsOutputFormatMultiError(errors)
	}

	return nil
}

// ModelFile_Output_BoundingBoxSegmentationsOutputFormatMultiError is an error
// wrapping multiple validation errors returned by
// ModelFile_Output_BoundingBoxSegmentationsOutputFormat.ValidateAll() if the
// designated constraints aren't met.
type ModelFile_Output_BoundingBoxSegmentationsOutputFormatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFile_Output_BoundingBoxSegmentationsOutputFormatMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFile_Output_BoundingBoxSegmentationsOutputFormatMultiError) AllErrors() []error {
	return m
}

// ModelFile_Output_BoundingBoxSegmentationsOutputFormatValidationError is the
// validation error returned by
// ModelFile_Output_BoundingBoxSegmentationsOutputFormat.Validate if the
// designated constraints aren't met.
type ModelFile_Output_BoundingBoxSegmentationsOutputFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFile_Output_BoundingBoxSegmentationsOutputFormatValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ModelFile_Output_BoundingBoxSegmentationsOutputFormatValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ModelFile_Output_BoundingBoxSegmentationsOutputFormatValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ModelFile_Output_BoundingBoxSegmentationsOutputFormatValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ModelFile_Output_BoundingBoxSegmentationsOutputFormatValidationError) ErrorName() string {
	return "ModelFile_Output_BoundingBoxSegmentationsOutputFormatValidationError"
}

// Error satisfies the builtin error interface
func (e ModelFile_Output_BoundingBoxSegmentationsOutputFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile_Output_BoundingBoxSegmentationsOutputFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFile_Output_BoundingBoxSegmentationsOutputFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFile_Output_BoundingBoxSegmentationsOutputFormatValidationError{}

// Validate checks the field values on ModelFile_Output_OcrOutputFormat with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ModelFile_Output_OcrOutputFormat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelFile_Output_OcrOutputFormat with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ModelFile_Output_OcrOutputFormatMultiError, or nil if none found.
func (m *ModelFile_Output_OcrOutputFormat) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile_Output_OcrOutputFormat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumberOfCharacters

	for idx, item := range m.GetCharacters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelFile_Output_OcrOutputFormatValidationError{
						field:  fmt.Sprintf("Characters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelFile_Output_OcrOutputFormatValidationError{
						field:  fmt.Sprintf("Characters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelFile_Output_OcrOutputFormatValidationError{
					field:  fmt.Sprintf("Characters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ModelFile_Output_OcrOutputFormatMultiError(errors)
	}

	return nil
}

// ModelFile_Output_OcrOutputFormatMultiError is an error wrapping multiple
// validation errors returned by
// ModelFile_Output_OcrOutputFormat.ValidateAll() if the designated
// constraints aren't met.
type ModelFile_Output_OcrOutputFormatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFile_Output_OcrOutputFormatMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFile_Output_OcrOutputFormatMultiError) AllErrors() []error { return m }

// ModelFile_Output_OcrOutputFormatValidationError is the validation error
// returned by ModelFile_Output_OcrOutputFormat.Validate if the designated
// constraints aren't met.
type ModelFile_Output_OcrOutputFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFile_Output_OcrOutputFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFile_Output_OcrOutputFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFile_Output_OcrOutputFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFile_Output_OcrOutputFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFile_Output_OcrOutputFormatValidationError) ErrorName() string {
	return "ModelFile_Output_OcrOutputFormatValidationError"
}

// Error satisfies the builtin error interface
func (e ModelFile_Output_OcrOutputFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile_Output_OcrOutputFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFile_Output_OcrOutputFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFile_Output_OcrOutputFormatValidationError{}

// Validate checks the field values on
// ModelFile_Output_OcrOutputFormat_Character with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelFile_Output_OcrOutputFormat_Character) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ModelFile_Output_OcrOutputFormat_Character with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ModelFile_Output_OcrOutputFormat_CharacterMultiError, or nil if none found.
func (m *ModelFile_Output_OcrOutputFormat_Character) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile_Output_OcrOutputFormat_Character) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Utf8Representation

	// no validation rules for CharacterType

	// no validation rules for Ignore

	if len(errors) > 0 {
		return ModelFile_Output_OcrOutputFormat_CharacterMultiError(errors)
	}

	return nil
}

// ModelFile_Output_OcrOutputFormat_CharacterMultiError is an error wrapping
// multiple validation errors returned by
// ModelFile_Output_OcrOutputFormat_Character.ValidateAll() if the designated
// constraints aren't met.
type ModelFile_Output_OcrOutputFormat_CharacterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFile_Output_OcrOutputFormat_CharacterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFile_Output_OcrOutputFormat_CharacterMultiError) AllErrors() []error { return m }

// ModelFile_Output_OcrOutputFormat_CharacterValidationError is the validation
// error returned by ModelFile_Output_OcrOutputFormat_Character.Validate if
// the designated constraints aren't met.
type ModelFile_Output_OcrOutputFormat_CharacterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFile_Output_OcrOutputFormat_CharacterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFile_Output_OcrOutputFormat_CharacterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFile_Output_OcrOutputFormat_CharacterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFile_Output_OcrOutputFormat_CharacterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFile_Output_OcrOutputFormat_CharacterValidationError) ErrorName() string {
	return "ModelFile_Output_OcrOutputFormat_CharacterValidationError"
}

// Error satisfies the builtin error interface
func (e ModelFile_Output_OcrOutputFormat_CharacterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile_Output_OcrOutputFormat_Character.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFile_Output_OcrOutputFormat_CharacterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFile_Output_OcrOutputFormat_CharacterValidationError{}
