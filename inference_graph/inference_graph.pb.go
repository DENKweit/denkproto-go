// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.26.0
// source: inference_graph.proto

package inference_graph

import (
	v2 "github.com/DENKweit/denkproto-go/modelfile/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ModelSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ModelSource:
	//
	//	*ModelSource_FromProto
	//	*ModelSource_FromNetworkId
	//	*ModelSource_FromNetworkExperimentId
	ModelSource isModelSource_ModelSource `protobuf_oneof:"model_source"`
}

func (x *ModelSource) Reset() {
	*x = ModelSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_graph_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelSource) ProtoMessage() {}

func (x *ModelSource) ProtoReflect() protoreflect.Message {
	mi := &file_inference_graph_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelSource.ProtoReflect.Descriptor instead.
func (*ModelSource) Descriptor() ([]byte, []int) {
	return file_inference_graph_proto_rawDescGZIP(), []int{0}
}

func (m *ModelSource) GetModelSource() isModelSource_ModelSource {
	if m != nil {
		return m.ModelSource
	}
	return nil
}

func (x *ModelSource) GetFromProto() *v2.ModelFile {
	if x, ok := x.GetModelSource().(*ModelSource_FromProto); ok {
		return x.FromProto
	}
	return nil
}

func (x *ModelSource) GetFromNetworkId() string {
	if x, ok := x.GetModelSource().(*ModelSource_FromNetworkId); ok {
		return x.FromNetworkId
	}
	return ""
}

func (x *ModelSource) GetFromNetworkExperimentId() string {
	if x, ok := x.GetModelSource().(*ModelSource_FromNetworkExperimentId); ok {
		return x.FromNetworkExperimentId
	}
	return ""
}

type isModelSource_ModelSource interface {
	isModelSource_ModelSource()
}

type ModelSource_FromProto struct {
	FromProto *v2.ModelFile `protobuf:"bytes,1,opt,name=from_proto,json=fromProto,proto3,oneof"`
}

type ModelSource_FromNetworkId struct {
	FromNetworkId string `protobuf:"bytes,2,opt,name=from_network_id,json=fromNetworkId,proto3,oneof"`
}

type ModelSource_FromNetworkExperimentId struct {
	FromNetworkExperimentId string `protobuf:"bytes,3,opt,name=from_network_experiment_id,json=fromNetworkExperimentId,proto3,oneof"`
}

func (*ModelSource_FromProto) isModelSource_ModelSource() {}

func (*ModelSource_FromNetworkId) isModelSource_ModelSource() {}

func (*ModelSource_FromNetworkExperimentId) isModelSource_ModelSource() {}

type ConstTensorNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Output string   `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	Shape  []uint32 `protobuf:"varint,3,rep,packed,name=shape,proto3" json:"shape,omitempty"`
	// Types that are assignable to Data:
	//
	//	*ConstTensorNode_Uint64Data
	//	*ConstTensorNode_Int64Data
	//	*ConstTensorNode_Float64Data
	Data isConstTensorNode_Data `protobuf_oneof:"data"`
}

func (x *ConstTensorNode) Reset() {
	*x = ConstTensorNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_graph_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstTensorNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstTensorNode) ProtoMessage() {}

func (x *ConstTensorNode) ProtoReflect() protoreflect.Message {
	mi := &file_inference_graph_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstTensorNode.ProtoReflect.Descriptor instead.
func (*ConstTensorNode) Descriptor() ([]byte, []int) {
	return file_inference_graph_proto_rawDescGZIP(), []int{1}
}

func (x *ConstTensorNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConstTensorNode) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *ConstTensorNode) GetShape() []uint32 {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (m *ConstTensorNode) GetData() isConstTensorNode_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *ConstTensorNode) GetUint64Data() *ConstTensorNode_Uint64Array {
	if x, ok := x.GetData().(*ConstTensorNode_Uint64Data); ok {
		return x.Uint64Data
	}
	return nil
}

func (x *ConstTensorNode) GetInt64Data() *ConstTensorNode_Int64Array {
	if x, ok := x.GetData().(*ConstTensorNode_Int64Data); ok {
		return x.Int64Data
	}
	return nil
}

func (x *ConstTensorNode) GetFloat64Data() *ConstTensorNode_Float64Array {
	if x, ok := x.GetData().(*ConstTensorNode_Float64Data); ok {
		return x.Float64Data
	}
	return nil
}

type isConstTensorNode_Data interface {
	isConstTensorNode_Data()
}

type ConstTensorNode_Uint64Data struct {
	Uint64Data *ConstTensorNode_Uint64Array `protobuf:"bytes,4,opt,name=uint64_data,json=uint64Data,proto3,oneof"`
}

type ConstTensorNode_Int64Data struct {
	Int64Data *ConstTensorNode_Int64Array `protobuf:"bytes,5,opt,name=int64_data,json=int64Data,proto3,oneof"`
}

type ConstTensorNode_Float64Data struct {
	Float64Data *ConstTensorNode_Float64Array `protobuf:"bytes,6,opt,name=float64_data,json=float64Data,proto3,oneof"`
}

func (*ConstTensorNode_Uint64Data) isConstTensorNode_Data() {}

func (*ConstTensorNode_Int64Data) isConstTensorNode_Data() {}

func (*ConstTensorNode_Float64Data) isConstTensorNode_Data() {}

type GenerateNumberNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Output string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	Min    uint64 `protobuf:"varint,3,opt,name=min,proto3" json:"min,omitempty"`
	Max    uint64 `protobuf:"varint,4,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *GenerateNumberNode) Reset() {
	*x = GenerateNumberNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_graph_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateNumberNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateNumberNode) ProtoMessage() {}

func (x *GenerateNumberNode) ProtoReflect() protoreflect.Message {
	mi := &file_inference_graph_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateNumberNode.ProtoReflect.Descriptor instead.
func (*GenerateNumberNode) Descriptor() ([]byte, []int) {
	return file_inference_graph_proto_rawDescGZIP(), []int{2}
}

func (x *GenerateNumberNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenerateNumberNode) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *GenerateNumberNode) GetMin() uint64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *GenerateNumberNode) GetMax() uint64 {
	if x != nil {
		return x.Max
	}
	return 0
}

type AddNumbersNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InputNumber_1 string `protobuf:"bytes,2,opt,name=input_number_1,json=inputNumber1,proto3" json:"input_number_1,omitempty"`
	InputNumber_2 string `protobuf:"bytes,3,opt,name=input_number_2,json=inputNumber2,proto3" json:"input_number_2,omitempty"`
	Output        string `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *AddNumbersNode) Reset() {
	*x = AddNumbersNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_graph_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNumbersNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNumbersNode) ProtoMessage() {}

func (x *AddNumbersNode) ProtoReflect() protoreflect.Message {
	mi := &file_inference_graph_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNumbersNode.ProtoReflect.Descriptor instead.
func (*AddNumbersNode) Descriptor() ([]byte, []int) {
	return file_inference_graph_proto_rawDescGZIP(), []int{3}
}

func (x *AddNumbersNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddNumbersNode) GetInputNumber_1() string {
	if x != nil {
		return x.InputNumber_1
	}
	return ""
}

func (x *AddNumbersNode) GetInputNumber_2() string {
	if x != nil {
		return x.InputNumber_2
	}
	return ""
}

func (x *AddNumbersNode) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type ImageResizeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InputSize  string `protobuf:"bytes,2,opt,name=input_size,json=inputSize,proto3" json:"input_size,omitempty"`
	InputImage string `protobuf:"bytes,3,opt,name=input_image,json=inputImage,proto3" json:"input_image,omitempty"`
	Output     string `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *ImageResizeNode) Reset() {
	*x = ImageResizeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_graph_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageResizeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageResizeNode) ProtoMessage() {}

func (x *ImageResizeNode) ProtoReflect() protoreflect.Message {
	mi := &file_inference_graph_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageResizeNode.ProtoReflect.Descriptor instead.
func (*ImageResizeNode) Descriptor() ([]byte, []int) {
	return file_inference_graph_proto_rawDescGZIP(), []int{4}
}

func (x *ImageResizeNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageResizeNode) GetInputSize() string {
	if x != nil {
		return x.InputSize
	}
	return ""
}

func (x *ImageResizeNode) GetInputImage() string {
	if x != nil {
		return x.InputImage
	}
	return ""
}

func (x *ImageResizeNode) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type ImagePatchesNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InputImage             string `protobuf:"bytes,2,opt,name=input_image,json=inputImage,proto3" json:"input_image,omitempty"`
	InputBoxes             string `protobuf:"bytes,3,opt,name=input_boxes,json=inputBoxes,proto3" json:"input_boxes,omitempty"`
	InputBatchMap          string `protobuf:"bytes,4,opt,name=input_batch_map,json=inputBatchMap,proto3" json:"input_batch_map,omitempty"`
	InputTargetSize        string `protobuf:"bytes,5,opt,name=input_target_size,json=inputTargetSize,proto3" json:"input_target_size,omitempty"`
	InputMaximumIterations string `protobuf:"bytes,6,opt,name=input_maximum_iterations,json=inputMaximumIterations,proto3" json:"input_maximum_iterations,omitempty"`
	Output                 string `protobuf:"bytes,7,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *ImagePatchesNode) Reset() {
	*x = ImagePatchesNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_graph_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagePatchesNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagePatchesNode) ProtoMessage() {}

func (x *ImagePatchesNode) ProtoReflect() protoreflect.Message {
	mi := &file_inference_graph_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagePatchesNode.ProtoReflect.Descriptor instead.
func (*ImagePatchesNode) Descriptor() ([]byte, []int) {
	return file_inference_graph_proto_rawDescGZIP(), []int{5}
}

func (x *ImagePatchesNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImagePatchesNode) GetInputImage() string {
	if x != nil {
		return x.InputImage
	}
	return ""
}

func (x *ImagePatchesNode) GetInputBoxes() string {
	if x != nil {
		return x.InputBoxes
	}
	return ""
}

func (x *ImagePatchesNode) GetInputBatchMap() string {
	if x != nil {
		return x.InputBatchMap
	}
	return ""
}

func (x *ImagePatchesNode) GetInputTargetSize() string {
	if x != nil {
		return x.InputTargetSize
	}
	return ""
}

func (x *ImagePatchesNode) GetInputMaximumIterations() string {
	if x != nil {
		return x.InputMaximumIterations
	}
	return ""
}

func (x *ImagePatchesNode) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type VirtualCameraNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Output string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	Path   string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *VirtualCameraNode) Reset() {
	*x = VirtualCameraNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_graph_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualCameraNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualCameraNode) ProtoMessage() {}

func (x *VirtualCameraNode) ProtoReflect() protoreflect.Message {
	mi := &file_inference_graph_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualCameraNode.ProtoReflect.Descriptor instead.
func (*VirtualCameraNode) Descriptor() ([]byte, []int) {
	return file_inference_graph_proto_rawDescGZIP(), []int{6}
}

func (x *VirtualCameraNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualCameraNode) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *VirtualCameraNode) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ImageClassificationNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Input       string       `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Output      string       `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	ModelSource *ModelSource `protobuf:"bytes,4,opt,name=model_source,json=modelSource,proto3" json:"model_source,omitempty"`
}

func (x *ImageClassificationNode) Reset() {
	*x = ImageClassificationNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_graph_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageClassificationNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageClassificationNode) ProtoMessage() {}

func (x *ImageClassificationNode) ProtoReflect() protoreflect.Message {
	mi := &file_inference_graph_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageClassificationNode.ProtoReflect.Descriptor instead.
func (*ImageClassificationNode) Descriptor() ([]byte, []int) {
	return file_inference_graph_proto_rawDescGZIP(), []int{7}
}

func (x *ImageClassificationNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageClassificationNode) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *ImageClassificationNode) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *ImageClassificationNode) GetModelSource() *ModelSource {
	if x != nil {
		return x.ModelSource
	}
	return nil
}

type ImageObjectDetectionNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Input       string       `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Output      string       `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	ModelSource *ModelSource `protobuf:"bytes,4,opt,name=model_source,json=modelSource,proto3" json:"model_source,omitempty"`
}

func (x *ImageObjectDetectionNode) Reset() {
	*x = ImageObjectDetectionNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_graph_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageObjectDetectionNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageObjectDetectionNode) ProtoMessage() {}

func (x *ImageObjectDetectionNode) ProtoReflect() protoreflect.Message {
	mi := &file_inference_graph_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageObjectDetectionNode.ProtoReflect.Descriptor instead.
func (*ImageObjectDetectionNode) Descriptor() ([]byte, []int) {
	return file_inference_graph_proto_rawDescGZIP(), []int{8}
}

func (x *ImageObjectDetectionNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageObjectDetectionNode) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *ImageObjectDetectionNode) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *ImageObjectDetectionNode) GetModelSource() *ModelSource {
	if x != nil {
		return x.ModelSource
	}
	return nil
}

type ImageOcrNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Input       string       `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Output      string       `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	ModelSource *ModelSource `protobuf:"bytes,4,opt,name=model_source,json=modelSource,proto3" json:"model_source,omitempty"`
}

func (x *ImageOcrNode) Reset() {
	*x = ImageOcrNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_graph_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageOcrNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageOcrNode) ProtoMessage() {}

func (x *ImageOcrNode) ProtoReflect() protoreflect.Message {
	mi := &file_inference_graph_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageOcrNode.ProtoReflect.Descriptor instead.
func (*ImageOcrNode) Descriptor() ([]byte, []int) {
	return file_inference_graph_proto_rawDescGZIP(), []int{9}
}

func (x *ImageOcrNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageOcrNode) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *ImageOcrNode) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *ImageOcrNode) GetModelSource() *ModelSource {
	if x != nil {
		return x.ModelSource
	}
	return nil
}

type BoundingBoxFilterNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InputThreshold string `protobuf:"bytes,2,opt,name=input_threshold,json=inputThreshold,proto3" json:"input_threshold,omitempty"`
	InputBoxes     string `protobuf:"bytes,3,opt,name=input_boxes,json=inputBoxes,proto3" json:"input_boxes,omitempty"`
	OutputBoxes    string `protobuf:"bytes,4,opt,name=output_boxes,json=outputBoxes,proto3" json:"output_boxes,omitempty"`
	OutputBatchMap string `protobuf:"bytes,5,opt,name=output_batch_map,json=outputBatchMap,proto3" json:"output_batch_map,omitempty"`
}

func (x *BoundingBoxFilterNode) Reset() {
	*x = BoundingBoxFilterNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_graph_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoundingBoxFilterNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundingBoxFilterNode) ProtoMessage() {}

func (x *BoundingBoxFilterNode) ProtoReflect() protoreflect.Message {
	mi := &file_inference_graph_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundingBoxFilterNode.ProtoReflect.Descriptor instead.
func (*BoundingBoxFilterNode) Descriptor() ([]byte, []int) {
	return file_inference_graph_proto_rawDescGZIP(), []int{10}
}

func (x *BoundingBoxFilterNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BoundingBoxFilterNode) GetInputThreshold() string {
	if x != nil {
		return x.InputThreshold
	}
	return ""
}

func (x *BoundingBoxFilterNode) GetInputBoxes() string {
	if x != nil {
		return x.InputBoxes
	}
	return ""
}

func (x *BoundingBoxFilterNode) GetOutputBoxes() string {
	if x != nil {
		return x.OutputBoxes
	}
	return ""
}

func (x *BoundingBoxFilterNode) GetOutputBatchMap() string {
	if x != nil {
		return x.OutputBatchMap
	}
	return ""
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to NodeType:
	//
	//	*Node_ConstTensorNode
	//	*Node_GenerateNumberNode
	//	*Node_AddNumbersNode
	//	*Node_ImageResizeNode
	//	*Node_ImagePatchesNode
	//	*Node_VirtualCameraNode
	//	*Node_ImageClassificationNode
	//	*Node_ImageObjectDetectionNode
	//	*Node_ImageOcrNode
	//	*Node_BoundingBoxFilterNode
	NodeType isNode_NodeType `protobuf_oneof:"NodeType"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_graph_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_inference_graph_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_inference_graph_proto_rawDescGZIP(), []int{11}
}

func (m *Node) GetNodeType() isNode_NodeType {
	if m != nil {
		return m.NodeType
	}
	return nil
}

func (x *Node) GetConstTensorNode() *ConstTensorNode {
	if x, ok := x.GetNodeType().(*Node_ConstTensorNode); ok {
		return x.ConstTensorNode
	}
	return nil
}

func (x *Node) GetGenerateNumberNode() *GenerateNumberNode {
	if x, ok := x.GetNodeType().(*Node_GenerateNumberNode); ok {
		return x.GenerateNumberNode
	}
	return nil
}

func (x *Node) GetAddNumbersNode() *AddNumbersNode {
	if x, ok := x.GetNodeType().(*Node_AddNumbersNode); ok {
		return x.AddNumbersNode
	}
	return nil
}

func (x *Node) GetImageResizeNode() *ImageResizeNode {
	if x, ok := x.GetNodeType().(*Node_ImageResizeNode); ok {
		return x.ImageResizeNode
	}
	return nil
}

func (x *Node) GetImagePatchesNode() *ImagePatchesNode {
	if x, ok := x.GetNodeType().(*Node_ImagePatchesNode); ok {
		return x.ImagePatchesNode
	}
	return nil
}

func (x *Node) GetVirtualCameraNode() *VirtualCameraNode {
	if x, ok := x.GetNodeType().(*Node_VirtualCameraNode); ok {
		return x.VirtualCameraNode
	}
	return nil
}

func (x *Node) GetImageClassificationNode() *ImageClassificationNode {
	if x, ok := x.GetNodeType().(*Node_ImageClassificationNode); ok {
		return x.ImageClassificationNode
	}
	return nil
}

func (x *Node) GetImageObjectDetectionNode() *ImageObjectDetectionNode {
	if x, ok := x.GetNodeType().(*Node_ImageObjectDetectionNode); ok {
		return x.ImageObjectDetectionNode
	}
	return nil
}

func (x *Node) GetImageOcrNode() *ImageOcrNode {
	if x, ok := x.GetNodeType().(*Node_ImageOcrNode); ok {
		return x.ImageOcrNode
	}
	return nil
}

func (x *Node) GetBoundingBoxFilterNode() *BoundingBoxFilterNode {
	if x, ok := x.GetNodeType().(*Node_BoundingBoxFilterNode); ok {
		return x.BoundingBoxFilterNode
	}
	return nil
}

type isNode_NodeType interface {
	isNode_NodeType()
}

type Node_ConstTensorNode struct {
	ConstTensorNode *ConstTensorNode `protobuf:"bytes,1,opt,name=const_tensor_node,json=constTensorNode,proto3,oneof"`
}

type Node_GenerateNumberNode struct {
	GenerateNumberNode *GenerateNumberNode `protobuf:"bytes,2,opt,name=generate_number_node,json=generateNumberNode,proto3,oneof"`
}

type Node_AddNumbersNode struct {
	AddNumbersNode *AddNumbersNode `protobuf:"bytes,3,opt,name=add_numbers_node,json=addNumbersNode,proto3,oneof"`
}

type Node_ImageResizeNode struct {
	ImageResizeNode *ImageResizeNode `protobuf:"bytes,4,opt,name=image_resize_node,json=imageResizeNode,proto3,oneof"`
}

type Node_ImagePatchesNode struct {
	ImagePatchesNode *ImagePatchesNode `protobuf:"bytes,5,opt,name=image_patches_node,json=imagePatchesNode,proto3,oneof"`
}

type Node_VirtualCameraNode struct {
	VirtualCameraNode *VirtualCameraNode `protobuf:"bytes,6,opt,name=virtual_camera_node,json=virtualCameraNode,proto3,oneof"`
}

type Node_ImageClassificationNode struct {
	ImageClassificationNode *ImageClassificationNode `protobuf:"bytes,7,opt,name=image_classification_node,json=imageClassificationNode,proto3,oneof"`
}

type Node_ImageObjectDetectionNode struct {
	ImageObjectDetectionNode *ImageObjectDetectionNode `protobuf:"bytes,8,opt,name=image_object_detection_node,json=imageObjectDetectionNode,proto3,oneof"`
}

type Node_ImageOcrNode struct {
	ImageOcrNode *ImageOcrNode `protobuf:"bytes,9,opt,name=image_ocr_node,json=imageOcrNode,proto3,oneof"`
}

type Node_BoundingBoxFilterNode struct {
	BoundingBoxFilterNode *BoundingBoxFilterNode `protobuf:"bytes,10,opt,name=bounding_box_filter_node,json=boundingBoxFilterNode,proto3,oneof"`
}

func (*Node_ConstTensorNode) isNode_NodeType() {}

func (*Node_GenerateNumberNode) isNode_NodeType() {}

func (*Node_AddNumbersNode) isNode_NodeType() {}

func (*Node_ImageResizeNode) isNode_NodeType() {}

func (*Node_ImagePatchesNode) isNode_NodeType() {}

func (*Node_VirtualCameraNode) isNode_NodeType() {}

func (*Node_ImageClassificationNode) isNode_NodeType() {}

func (*Node_ImageObjectDetectionNode) isNode_NodeType() {}

func (*Node_ImageOcrNode) isNode_NodeType() {}

func (*Node_BoundingBoxFilterNode) isNode_NodeType() {}

type Graph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes     []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	CreatedAt int64   `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LicenseId string  `protobuf:"bytes,3,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty"`
}

func (x *Graph) Reset() {
	*x = Graph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_graph_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph) ProtoMessage() {}

func (x *Graph) ProtoReflect() protoreflect.Message {
	mi := &file_inference_graph_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph.ProtoReflect.Descriptor instead.
func (*Graph) Descriptor() ([]byte, []int) {
	return file_inference_graph_proto_rawDescGZIP(), []int{12}
}

func (x *Graph) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Graph) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Graph) GetLicenseId() string {
	if x != nil {
		return x.LicenseId
	}
	return ""
}

type ConstTensorNode_Uint64Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []uint64 `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *ConstTensorNode_Uint64Array) Reset() {
	*x = ConstTensorNode_Uint64Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_graph_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstTensorNode_Uint64Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstTensorNode_Uint64Array) ProtoMessage() {}

func (x *ConstTensorNode_Uint64Array) ProtoReflect() protoreflect.Message {
	mi := &file_inference_graph_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstTensorNode_Uint64Array.ProtoReflect.Descriptor instead.
func (*ConstTensorNode_Uint64Array) Descriptor() ([]byte, []int) {
	return file_inference_graph_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ConstTensorNode_Uint64Array) GetData() []uint64 {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConstTensorNode_Int64Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []int64 `protobuf:"zigzag64,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *ConstTensorNode_Int64Array) Reset() {
	*x = ConstTensorNode_Int64Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_graph_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstTensorNode_Int64Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstTensorNode_Int64Array) ProtoMessage() {}

func (x *ConstTensorNode_Int64Array) ProtoReflect() protoreflect.Message {
	mi := &file_inference_graph_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstTensorNode_Int64Array.ProtoReflect.Descriptor instead.
func (*ConstTensorNode_Int64Array) Descriptor() ([]byte, []int) {
	return file_inference_graph_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ConstTensorNode_Int64Array) GetData() []int64 {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConstTensorNode_Float64Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []float64 `protobuf:"fixed64,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *ConstTensorNode_Float64Array) Reset() {
	*x = ConstTensorNode_Float64Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_graph_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstTensorNode_Float64Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstTensorNode_Float64Array) ProtoMessage() {}

func (x *ConstTensorNode_Float64Array) ProtoReflect() protoreflect.Message {
	mi := &file_inference_graph_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstTensorNode_Float64Array.ProtoReflect.Descriptor instead.
func (*ConstTensorNode_Float64Array) Descriptor() ([]byte, []int) {
	return file_inference_graph_proto_rawDescGZIP(), []int{1, 2}
}

func (x *ConstTensorNode_Float64Array) GetData() []float64 {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_inference_graph_proto protoreflect.FileDescriptor

var file_inference_graph_proto_rawDesc = []byte{
	0x0a, 0x15, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x1a, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x66,
	0x69, 0x6c, 0x65, 0x2d, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x01, 0x0a,
	0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x09, 0x66, 0x72, 0x6f,
	0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x1a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x17, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0xb7, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x36, 0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x36, 0x34, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x21, 0x0a, 0x0b, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x20, 0x0a, 0x0a, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x12, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x22, 0x0a,
	0x0c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x64, 0x0a, 0x12, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22,
	0x88, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x31, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x32, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x7d, 0x0a, 0x0f, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x8e, 0x02, 0x0a, 0x10, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x6f, 0x78,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x42,
	0x6f, 0x78, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x53, 0x0a, 0x11, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22,
	0x9c, 0x01, 0x0a, 0x17, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3f, 0x0a,
	0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x9d,
	0x01, 0x0a, 0x18, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3f, 0x0a,
	0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x91,
	0x01, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x63, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x15, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x6f, 0x78, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x6f, 0x78, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x6f, 0x78, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x70, 0x22, 0xff, 0x06, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x4e, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x57, 0x0a, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x61, 0x64, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x11, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x66, 0x0a, 0x19, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x17,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x6a, 0x0a, 0x1b, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x18, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x63, 0x72,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4f, 0x63, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x4f, 0x63, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x61, 0x0a, 0x18, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x15, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x42, 0x6f, 0x78, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x72, 0x0a, 0x05, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x12, 0x2b, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x42, 0x4e, 0x5a,
	0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x45, 0x4e, 0x4b,
	0x77, 0x65, 0x69, 0x74, 0x2f, 0x64, 0x65, 0x6e, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67,
	0x6f, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0xaa, 0x02, 0x19, 0x44, 0x45, 0x4e, 0x4b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inference_graph_proto_rawDescOnce sync.Once
	file_inference_graph_proto_rawDescData = file_inference_graph_proto_rawDesc
)

func file_inference_graph_proto_rawDescGZIP() []byte {
	file_inference_graph_proto_rawDescOnce.Do(func() {
		file_inference_graph_proto_rawDescData = protoimpl.X.CompressGZIP(file_inference_graph_proto_rawDescData)
	})
	return file_inference_graph_proto_rawDescData
}

var file_inference_graph_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_inference_graph_proto_goTypes = []interface{}{
	(*ModelSource)(nil),                  // 0: inference_graph.ModelSource
	(*ConstTensorNode)(nil),              // 1: inference_graph.ConstTensorNode
	(*GenerateNumberNode)(nil),           // 2: inference_graph.GenerateNumberNode
	(*AddNumbersNode)(nil),               // 3: inference_graph.AddNumbersNode
	(*ImageResizeNode)(nil),              // 4: inference_graph.ImageResizeNode
	(*ImagePatchesNode)(nil),             // 5: inference_graph.ImagePatchesNode
	(*VirtualCameraNode)(nil),            // 6: inference_graph.VirtualCameraNode
	(*ImageClassificationNode)(nil),      // 7: inference_graph.ImageClassificationNode
	(*ImageObjectDetectionNode)(nil),     // 8: inference_graph.ImageObjectDetectionNode
	(*ImageOcrNode)(nil),                 // 9: inference_graph.ImageOcrNode
	(*BoundingBoxFilterNode)(nil),        // 10: inference_graph.BoundingBoxFilterNode
	(*Node)(nil),                         // 11: inference_graph.Node
	(*Graph)(nil),                        // 12: inference_graph.Graph
	(*ConstTensorNode_Uint64Array)(nil),  // 13: inference_graph.ConstTensorNode.Uint64Array
	(*ConstTensorNode_Int64Array)(nil),   // 14: inference_graph.ConstTensorNode.Int64Array
	(*ConstTensorNode_Float64Array)(nil), // 15: inference_graph.ConstTensorNode.Float64Array
	(*v2.ModelFile)(nil),                 // 16: modelfile.v2.ModelFile
}
var file_inference_graph_proto_depIdxs = []int32{
	16, // 0: inference_graph.ModelSource.from_proto:type_name -> modelfile.v2.ModelFile
	13, // 1: inference_graph.ConstTensorNode.uint64_data:type_name -> inference_graph.ConstTensorNode.Uint64Array
	14, // 2: inference_graph.ConstTensorNode.int64_data:type_name -> inference_graph.ConstTensorNode.Int64Array
	15, // 3: inference_graph.ConstTensorNode.float64_data:type_name -> inference_graph.ConstTensorNode.Float64Array
	0,  // 4: inference_graph.ImageClassificationNode.model_source:type_name -> inference_graph.ModelSource
	0,  // 5: inference_graph.ImageObjectDetectionNode.model_source:type_name -> inference_graph.ModelSource
	0,  // 6: inference_graph.ImageOcrNode.model_source:type_name -> inference_graph.ModelSource
	1,  // 7: inference_graph.Node.const_tensor_node:type_name -> inference_graph.ConstTensorNode
	2,  // 8: inference_graph.Node.generate_number_node:type_name -> inference_graph.GenerateNumberNode
	3,  // 9: inference_graph.Node.add_numbers_node:type_name -> inference_graph.AddNumbersNode
	4,  // 10: inference_graph.Node.image_resize_node:type_name -> inference_graph.ImageResizeNode
	5,  // 11: inference_graph.Node.image_patches_node:type_name -> inference_graph.ImagePatchesNode
	6,  // 12: inference_graph.Node.virtual_camera_node:type_name -> inference_graph.VirtualCameraNode
	7,  // 13: inference_graph.Node.image_classification_node:type_name -> inference_graph.ImageClassificationNode
	8,  // 14: inference_graph.Node.image_object_detection_node:type_name -> inference_graph.ImageObjectDetectionNode
	9,  // 15: inference_graph.Node.image_ocr_node:type_name -> inference_graph.ImageOcrNode
	10, // 16: inference_graph.Node.bounding_box_filter_node:type_name -> inference_graph.BoundingBoxFilterNode
	11, // 17: inference_graph.Graph.nodes:type_name -> inference_graph.Node
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_inference_graph_proto_init() }
func file_inference_graph_proto_init() {
	if File_inference_graph_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inference_graph_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_graph_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstTensorNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_graph_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateNumberNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_graph_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNumbersNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_graph_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageResizeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_graph_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagePatchesNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_graph_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualCameraNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_graph_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageClassificationNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_graph_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageObjectDetectionNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_graph_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageOcrNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_graph_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoundingBoxFilterNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_graph_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_graph_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_graph_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstTensorNode_Uint64Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_graph_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstTensorNode_Int64Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_graph_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstTensorNode_Float64Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_inference_graph_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ModelSource_FromProto)(nil),
		(*ModelSource_FromNetworkId)(nil),
		(*ModelSource_FromNetworkExperimentId)(nil),
	}
	file_inference_graph_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ConstTensorNode_Uint64Data)(nil),
		(*ConstTensorNode_Int64Data)(nil),
		(*ConstTensorNode_Float64Data)(nil),
	}
	file_inference_graph_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Node_ConstTensorNode)(nil),
		(*Node_GenerateNumberNode)(nil),
		(*Node_AddNumbersNode)(nil),
		(*Node_ImageResizeNode)(nil),
		(*Node_ImagePatchesNode)(nil),
		(*Node_VirtualCameraNode)(nil),
		(*Node_ImageClassificationNode)(nil),
		(*Node_ImageObjectDetectionNode)(nil),
		(*Node_ImageOcrNode)(nil),
		(*Node_BoundingBoxFilterNode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inference_graph_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_inference_graph_proto_goTypes,
		DependencyIndexes: file_inference_graph_proto_depIdxs,
		MessageInfos:      file_inference_graph_proto_msgTypes,
	}.Build()
	File_inference_graph_proto = out.File
	file_inference_graph_proto_rawDesc = nil
	file_inference_graph_proto_goTypes = nil
	file_inference_graph_proto_depIdxs = nil
}
