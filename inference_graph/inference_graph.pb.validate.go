// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: inference_graph.proto

package inference_graph

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _inference_graph_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ModelSource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelSource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelSourceMultiError, or
// nil if none found.
func (m *ModelSource) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofSourceTypePresent := false
	switch v := m.SourceType.(type) {
	case *ModelSource_FromProto:
		if v == nil {
			err := ModelSourceValidationError{
				field:  "SourceType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSourceTypePresent = true

		if all {
			switch v := interface{}(m.GetFromProto()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelSourceValidationError{
						field:  "FromProto",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelSourceValidationError{
						field:  "FromProto",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFromProto()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelSourceValidationError{
					field:  "FromProto",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ModelSource_FromNetworkId:
		if v == nil {
			err := ModelSourceValidationError{
				field:  "SourceType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSourceTypePresent = true

		if err := m._validateUuid(m.GetFromNetworkId()); err != nil {
			err = ModelSourceValidationError{
				field:  "FromNetworkId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *ModelSource_FromNetworkExperimentId:
		if v == nil {
			err := ModelSourceValidationError{
				field:  "SourceType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSourceTypePresent = true

		if err := m._validateUuid(m.GetFromNetworkExperimentId()); err != nil {
			err = ModelSourceValidationError{
				field:  "FromNetworkExperimentId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofSourceTypePresent {
		err := ModelSourceValidationError{
			field:  "SourceType",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ModelSourceMultiError(errors)
	}

	return nil
}

func (m *ModelSource) _validateUuid(uuid string) error {
	if matched := _inference_graph_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ModelSourceMultiError is an error wrapping multiple validation errors
// returned by ModelSource.ValidateAll() if the designated constraints aren't met.
type ModelSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelSourceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelSourceMultiError) AllErrors() []error { return m }

// ModelSourceValidationError is the validation error returned by
// ModelSource.Validate if the designated constraints aren't met.
type ModelSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelSourceValidationError) ErrorName() string { return "ModelSourceValidationError" }

// Error satisfies the builtin error interface
func (e ModelSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelSourceValidationError{}

// Validate checks the field values on SessionInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SessionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SessionInfoMultiError, or
// nil if none found.
func (m *SessionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := ExecutionProvider_name[int32(m.GetExecutionProvider())]; !ok {
		err := SessionInfoValidationError{
			field:  "ExecutionProvider",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDeviceId() < 0 {
		err := SessionInfoValidationError{
			field:  "DeviceId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SessionInfoMultiError(errors)
	}

	return nil
}

// SessionInfoMultiError is an error wrapping multiple validation errors
// returned by SessionInfo.ValidateAll() if the designated constraints aren't met.
type SessionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionInfoMultiError) AllErrors() []error { return m }

// SessionInfoValidationError is the validation error returned by
// SessionInfo.Validate if the designated constraints aren't met.
type SessionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionInfoValidationError) ErrorName() string { return "SessionInfoValidationError" }

// Error satisfies the builtin error interface
func (e SessionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionInfoValidationError{}

// Validate checks the field values on ConstTensorNode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConstTensorNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConstTensorNode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConstTensorNodeMultiError, or nil if none found.
func (m *ConstTensorNode) ValidateAll() error {
	return m.validate(true)
}

func (m *ConstTensorNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ConstTensorNodeValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOutputPortName()) < 1 {
		err := ConstTensorNodeValidationError{
			field:  "OutputPortName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ConstTensorNode_OutputPortName_Pattern.MatchString(m.GetOutputPortName()) {
		err := ConstTensorNodeValidationError{
			field:  "OutputPortName",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	oneofDataTypePresent := false
	switch v := m.DataType.(type) {
	case *ConstTensorNode_Uint64Data:
		if v == nil {
			err := ConstTensorNodeValidationError{
				field:  "DataType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataTypePresent = true

		if all {
			switch v := interface{}(m.GetUint64Data()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConstTensorNodeValidationError{
						field:  "Uint64Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConstTensorNodeValidationError{
						field:  "Uint64Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUint64Data()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConstTensorNodeValidationError{
					field:  "Uint64Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ConstTensorNode_Int64Data:
		if v == nil {
			err := ConstTensorNodeValidationError{
				field:  "DataType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataTypePresent = true

		if all {
			switch v := interface{}(m.GetInt64Data()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConstTensorNodeValidationError{
						field:  "Int64Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConstTensorNodeValidationError{
						field:  "Int64Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInt64Data()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConstTensorNodeValidationError{
					field:  "Int64Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ConstTensorNode_Float64Data:
		if v == nil {
			err := ConstTensorNodeValidationError{
				field:  "DataType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataTypePresent = true

		if all {
			switch v := interface{}(m.GetFloat64Data()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConstTensorNodeValidationError{
						field:  "Float64Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConstTensorNodeValidationError{
						field:  "Float64Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFloat64Data()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConstTensorNodeValidationError{
					field:  "Float64Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofDataTypePresent {
		err := ConstTensorNodeValidationError{
			field:  "DataType",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ConstTensorNodeMultiError(errors)
	}

	return nil
}

// ConstTensorNodeMultiError is an error wrapping multiple validation errors
// returned by ConstTensorNode.ValidateAll() if the designated constraints
// aren't met.
type ConstTensorNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConstTensorNodeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConstTensorNodeMultiError) AllErrors() []error { return m }

// ConstTensorNodeValidationError is the validation error returned by
// ConstTensorNode.Validate if the designated constraints aren't met.
type ConstTensorNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConstTensorNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConstTensorNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConstTensorNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConstTensorNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConstTensorNodeValidationError) ErrorName() string { return "ConstTensorNodeValidationError" }

// Error satisfies the builtin error interface
func (e ConstTensorNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConstTensorNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConstTensorNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConstTensorNodeValidationError{}

var _ConstTensorNode_OutputPortName_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

// Validate checks the field values on ImageResizeNode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImageResizeNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageResizeNode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImageResizeNodeMultiError, or nil if none found.
func (m *ImageResizeNode) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageResizeNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ImageResizeNodeValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetInputSize()) < 1 {
		err := ImageResizeNodeValidationError{
			field:  "InputSize",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ImageResizeNode_InputSize_Pattern.MatchString(m.GetInputSize()) {
		err := ImageResizeNodeValidationError{
			field:  "InputSize",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_]+\\\\/[a-zA-Z0-9_]+([?]timeout=\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetInputImage()) < 1 {
		err := ImageResizeNodeValidationError{
			field:  "InputImage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ImageResizeNode_InputImage_Pattern.MatchString(m.GetInputImage()) {
		err := ImageResizeNodeValidationError{
			field:  "InputImage",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_]+\\\\/[a-zA-Z0-9_]+([?]timeout=\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOutputPortName()) < 1 {
		err := ImageResizeNodeValidationError{
			field:  "OutputPortName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ImageResizeNode_OutputPortName_Pattern.MatchString(m.GetOutputPortName()) {
		err := ImageResizeNodeValidationError{
			field:  "OutputPortName",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.SessionInfo != nil {

		if all {
			switch v := interface{}(m.GetSessionInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImageResizeNodeValidationError{
						field:  "SessionInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImageResizeNodeValidationError{
						field:  "SessionInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSessionInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImageResizeNodeValidationError{
					field:  "SessionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImageResizeNodeMultiError(errors)
	}

	return nil
}

// ImageResizeNodeMultiError is an error wrapping multiple validation errors
// returned by ImageResizeNode.ValidateAll() if the designated constraints
// aren't met.
type ImageResizeNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageResizeNodeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageResizeNodeMultiError) AllErrors() []error { return m }

// ImageResizeNodeValidationError is the validation error returned by
// ImageResizeNode.Validate if the designated constraints aren't met.
type ImageResizeNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageResizeNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageResizeNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageResizeNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageResizeNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageResizeNodeValidationError) ErrorName() string { return "ImageResizeNodeValidationError" }

// Error satisfies the builtin error interface
func (e ImageResizeNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageResizeNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageResizeNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageResizeNodeValidationError{}

var _ImageResizeNode_InputSize_Pattern = regexp.MustCompile("^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$")

var _ImageResizeNode_InputImage_Pattern = regexp.MustCompile("^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$")

var _ImageResizeNode_OutputPortName_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

// Validate checks the field values on ImagePatchesNode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImagePatchesNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImagePatchesNode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImagePatchesNodeMultiError, or nil if none found.
func (m *ImagePatchesNode) ValidateAll() error {
	return m.validate(true)
}

func (m *ImagePatchesNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ImagePatchesNodeValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetInputImage()) < 1 {
		err := ImagePatchesNodeValidationError{
			field:  "InputImage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ImagePatchesNode_InputImage_Pattern.MatchString(m.GetInputImage()) {
		err := ImagePatchesNodeValidationError{
			field:  "InputImage",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_]+\\\\/[a-zA-Z0-9_]+([?]timeout=\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetInputBoundingBoxes()) < 1 {
		err := ImagePatchesNodeValidationError{
			field:  "InputBoundingBoxes",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ImagePatchesNode_InputBoundingBoxes_Pattern.MatchString(m.GetInputBoundingBoxes()) {
		err := ImagePatchesNodeValidationError{
			field:  "InputBoundingBoxes",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_]+\\\\/[a-zA-Z0-9_]+([?]timeout=\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetInputTargetSize() == nil {
		err := ImagePatchesNodeValidationError{
			field:  "InputTargetSize",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetInputTargetSize()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImagePatchesNodeValidationError{
					field:  "InputTargetSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImagePatchesNodeValidationError{
					field:  "InputTargetSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInputTargetSize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImagePatchesNodeValidationError{
				field:  "InputTargetSize",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetOutputPortName()) < 1 {
		err := ImagePatchesNodeValidationError{
			field:  "OutputPortName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ImagePatchesNode_OutputPortName_Pattern.MatchString(m.GetOutputPortName()) {
		err := ImagePatchesNodeValidationError{
			field:  "OutputPortName",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.SessionInfo != nil {

		if all {
			switch v := interface{}(m.GetSessionInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImagePatchesNodeValidationError{
						field:  "SessionInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImagePatchesNodeValidationError{
						field:  "SessionInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSessionInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImagePatchesNodeValidationError{
					field:  "SessionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImagePatchesNodeMultiError(errors)
	}

	return nil
}

// ImagePatchesNodeMultiError is an error wrapping multiple validation errors
// returned by ImagePatchesNode.ValidateAll() if the designated constraints
// aren't met.
type ImagePatchesNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImagePatchesNodeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImagePatchesNodeMultiError) AllErrors() []error { return m }

// ImagePatchesNodeValidationError is the validation error returned by
// ImagePatchesNode.Validate if the designated constraints aren't met.
type ImagePatchesNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImagePatchesNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImagePatchesNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImagePatchesNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImagePatchesNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImagePatchesNodeValidationError) ErrorName() string { return "ImagePatchesNodeValidationError" }

// Error satisfies the builtin error interface
func (e ImagePatchesNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImagePatchesNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImagePatchesNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImagePatchesNodeValidationError{}

var _ImagePatchesNode_InputImage_Pattern = regexp.MustCompile("^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$")

var _ImagePatchesNode_InputBoundingBoxes_Pattern = regexp.MustCompile("^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$")

var _ImagePatchesNode_OutputPortName_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

// Validate checks the field values on VirtualCameraNode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VirtualCameraNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VirtualCameraNode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VirtualCameraNodeMultiError, or nil if none found.
func (m *VirtualCameraNode) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualCameraNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := VirtualCameraNodeValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPath()) < 1 {
		err := VirtualCameraNodeValidationError{
			field:  "Path",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOutputPortName()) < 1 {
		err := VirtualCameraNodeValidationError{
			field:  "OutputPortName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_VirtualCameraNode_OutputPortName_Pattern.MatchString(m.GetOutputPortName()) {
		err := VirtualCameraNodeValidationError{
			field:  "OutputPortName",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VirtualCameraNodeMultiError(errors)
	}

	return nil
}

// VirtualCameraNodeMultiError is an error wrapping multiple validation errors
// returned by VirtualCameraNode.ValidateAll() if the designated constraints
// aren't met.
type VirtualCameraNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualCameraNodeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualCameraNodeMultiError) AllErrors() []error { return m }

// VirtualCameraNodeValidationError is the validation error returned by
// VirtualCameraNode.Validate if the designated constraints aren't met.
type VirtualCameraNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualCameraNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualCameraNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualCameraNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualCameraNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualCameraNodeValidationError) ErrorName() string {
	return "VirtualCameraNodeValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualCameraNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualCameraNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualCameraNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualCameraNodeValidationError{}

var _VirtualCameraNode_OutputPortName_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

// Validate checks the field values on ImageClassificationNode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImageClassificationNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageClassificationNode with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImageClassificationNodeMultiError, or nil if none found.
func (m *ImageClassificationNode) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageClassificationNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetInputImage()) < 1 {
		err := ImageClassificationNodeValidationError{
			field:  "InputImage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ImageClassificationNode_InputImage_Pattern.MatchString(m.GetInputImage()) {
		err := ImageClassificationNodeValidationError{
			field:  "InputImage",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_]+\\\\/[a-zA-Z0-9_]+([?]timeout=\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetModelSource() == nil {
		err := ImageClassificationNodeValidationError{
			field:  "ModelSource",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetModelSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImageClassificationNodeValidationError{
					field:  "ModelSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImageClassificationNodeValidationError{
					field:  "ModelSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModelSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImageClassificationNodeValidationError{
				field:  "ModelSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetOutputPortName()) < 1 {
		err := ImageClassificationNodeValidationError{
			field:  "OutputPortName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ImageClassificationNode_OutputPortName_Pattern.MatchString(m.GetOutputPortName()) {
		err := ImageClassificationNodeValidationError{
			field:  "OutputPortName",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.SessionInfo != nil {

		if all {
			switch v := interface{}(m.GetSessionInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImageClassificationNodeValidationError{
						field:  "SessionInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImageClassificationNodeValidationError{
						field:  "SessionInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSessionInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImageClassificationNodeValidationError{
					field:  "SessionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImageClassificationNodeMultiError(errors)
	}

	return nil
}

// ImageClassificationNodeMultiError is an error wrapping multiple validation
// errors returned by ImageClassificationNode.ValidateAll() if the designated
// constraints aren't met.
type ImageClassificationNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageClassificationNodeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageClassificationNodeMultiError) AllErrors() []error { return m }

// ImageClassificationNodeValidationError is the validation error returned by
// ImageClassificationNode.Validate if the designated constraints aren't met.
type ImageClassificationNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageClassificationNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageClassificationNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageClassificationNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageClassificationNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageClassificationNodeValidationError) ErrorName() string {
	return "ImageClassificationNodeValidationError"
}

// Error satisfies the builtin error interface
func (e ImageClassificationNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageClassificationNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageClassificationNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageClassificationNodeValidationError{}

var _ImageClassificationNode_InputImage_Pattern = regexp.MustCompile("^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$")

var _ImageClassificationNode_OutputPortName_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

// Validate checks the field values on ImageObjectDetectionNode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImageObjectDetectionNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageObjectDetectionNode with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImageObjectDetectionNodeMultiError, or nil if none found.
func (m *ImageObjectDetectionNode) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageObjectDetectionNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetInputImage()) < 1 {
		err := ImageObjectDetectionNodeValidationError{
			field:  "InputImage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ImageObjectDetectionNode_InputImage_Pattern.MatchString(m.GetInputImage()) {
		err := ImageObjectDetectionNodeValidationError{
			field:  "InputImage",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_]+\\\\/[a-zA-Z0-9_]+([?]timeout=\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetModelSource() == nil {
		err := ImageObjectDetectionNodeValidationError{
			field:  "ModelSource",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetModelSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImageObjectDetectionNodeValidationError{
					field:  "ModelSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImageObjectDetectionNodeValidationError{
					field:  "ModelSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModelSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImageObjectDetectionNodeValidationError{
				field:  "ModelSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ScaleBoundingBoxes

	if utf8.RuneCountInString(m.GetOutputPortName()) < 1 {
		err := ImageObjectDetectionNodeValidationError{
			field:  "OutputPortName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ImageObjectDetectionNode_OutputPortName_Pattern.MatchString(m.GetOutputPortName()) {
		err := ImageObjectDetectionNodeValidationError{
			field:  "OutputPortName",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.SessionInfo != nil {

		if all {
			switch v := interface{}(m.GetSessionInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImageObjectDetectionNodeValidationError{
						field:  "SessionInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImageObjectDetectionNodeValidationError{
						field:  "SessionInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSessionInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImageObjectDetectionNodeValidationError{
					field:  "SessionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImageObjectDetectionNodeMultiError(errors)
	}

	return nil
}

// ImageObjectDetectionNodeMultiError is an error wrapping multiple validation
// errors returned by ImageObjectDetectionNode.ValidateAll() if the designated
// constraints aren't met.
type ImageObjectDetectionNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageObjectDetectionNodeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageObjectDetectionNodeMultiError) AllErrors() []error { return m }

// ImageObjectDetectionNodeValidationError is the validation error returned by
// ImageObjectDetectionNode.Validate if the designated constraints aren't met.
type ImageObjectDetectionNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageObjectDetectionNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageObjectDetectionNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageObjectDetectionNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageObjectDetectionNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageObjectDetectionNodeValidationError) ErrorName() string {
	return "ImageObjectDetectionNodeValidationError"
}

// Error satisfies the builtin error interface
func (e ImageObjectDetectionNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageObjectDetectionNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageObjectDetectionNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageObjectDetectionNodeValidationError{}

var _ImageObjectDetectionNode_InputImage_Pattern = regexp.MustCompile("^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$")

var _ImageObjectDetectionNode_OutputPortName_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

// Validate checks the field values on ImageOcrNode with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageOcrNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageOcrNode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageOcrNodeMultiError, or
// nil if none found.
func (m *ImageOcrNode) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageOcrNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetInputImage()) < 1 {
		err := ImageOcrNodeValidationError{
			field:  "InputImage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ImageOcrNode_InputImage_Pattern.MatchString(m.GetInputImage()) {
		err := ImageOcrNodeValidationError{
			field:  "InputImage",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_]+\\\\/[a-zA-Z0-9_]+([?]timeout=\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetModelSource() == nil {
		err := ImageOcrNodeValidationError{
			field:  "ModelSource",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetModelSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImageOcrNodeValidationError{
					field:  "ModelSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImageOcrNodeValidationError{
					field:  "ModelSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModelSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImageOcrNodeValidationError{
				field:  "ModelSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetOutputPortName()) < 1 {
		err := ImageOcrNodeValidationError{
			field:  "OutputPortName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ImageOcrNode_OutputPortName_Pattern.MatchString(m.GetOutputPortName()) {
		err := ImageOcrNodeValidationError{
			field:  "OutputPortName",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.SessionInfo != nil {

		if all {
			switch v := interface{}(m.GetSessionInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImageOcrNodeValidationError{
						field:  "SessionInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImageOcrNodeValidationError{
						field:  "SessionInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSessionInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImageOcrNodeValidationError{
					field:  "SessionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImageOcrNodeMultiError(errors)
	}

	return nil
}

// ImageOcrNodeMultiError is an error wrapping multiple validation errors
// returned by ImageOcrNode.ValidateAll() if the designated constraints aren't met.
type ImageOcrNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageOcrNodeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageOcrNodeMultiError) AllErrors() []error { return m }

// ImageOcrNodeValidationError is the validation error returned by
// ImageOcrNode.Validate if the designated constraints aren't met.
type ImageOcrNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageOcrNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageOcrNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageOcrNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageOcrNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageOcrNodeValidationError) ErrorName() string { return "ImageOcrNodeValidationError" }

// Error satisfies the builtin error interface
func (e ImageOcrNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageOcrNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageOcrNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageOcrNodeValidationError{}

var _ImageOcrNode_InputImage_Pattern = regexp.MustCompile("^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$")

var _ImageOcrNode_OutputPortName_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

// Validate checks the field values on BoundingBoxFilterNode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BoundingBoxFilterNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BoundingBoxFilterNode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BoundingBoxFilterNodeMultiError, or nil if none found.
func (m *BoundingBoxFilterNode) ValidateAll() error {
	return m.validate(true)
}

func (m *BoundingBoxFilterNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := BoundingBoxFilterNodeValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetInputBoundingBoxes()) < 1 {
		err := BoundingBoxFilterNodeValidationError{
			field:  "InputBoundingBoxes",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_BoundingBoxFilterNode_InputBoundingBoxes_Pattern.MatchString(m.GetInputBoundingBoxes()) {
		err := BoundingBoxFilterNodeValidationError{
			field:  "InputBoundingBoxes",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_]+\\\\/[a-zA-Z0-9_]+([?]timeout=\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOutputPortName()) < 1 {
		err := BoundingBoxFilterNodeValidationError{
			field:  "OutputPortName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_BoundingBoxFilterNode_OutputPortName_Pattern.MatchString(m.GetOutputPortName()) {
		err := BoundingBoxFilterNodeValidationError{
			field:  "OutputPortName",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.InputScoreThreshold != nil {

		if all {
			switch v := interface{}(m.GetInputScoreThreshold()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BoundingBoxFilterNodeValidationError{
						field:  "InputScoreThreshold",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BoundingBoxFilterNodeValidationError{
						field:  "InputScoreThreshold",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInputScoreThreshold()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BoundingBoxFilterNodeValidationError{
					field:  "InputScoreThreshold",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.InputIouThreshold != nil {

		if all {
			switch v := interface{}(m.GetInputIouThreshold()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BoundingBoxFilterNodeValidationError{
						field:  "InputIouThreshold",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BoundingBoxFilterNodeValidationError{
						field:  "InputIouThreshold",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInputIouThreshold()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BoundingBoxFilterNodeValidationError{
					field:  "InputIouThreshold",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.SessionInfo != nil {

		if all {
			switch v := interface{}(m.GetSessionInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BoundingBoxFilterNodeValidationError{
						field:  "SessionInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BoundingBoxFilterNodeValidationError{
						field:  "SessionInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSessionInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BoundingBoxFilterNodeValidationError{
					field:  "SessionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BoundingBoxFilterNodeMultiError(errors)
	}

	return nil
}

// BoundingBoxFilterNodeMultiError is an error wrapping multiple validation
// errors returned by BoundingBoxFilterNode.ValidateAll() if the designated
// constraints aren't met.
type BoundingBoxFilterNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BoundingBoxFilterNodeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BoundingBoxFilterNodeMultiError) AllErrors() []error { return m }

// BoundingBoxFilterNodeValidationError is the validation error returned by
// BoundingBoxFilterNode.Validate if the designated constraints aren't met.
type BoundingBoxFilterNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BoundingBoxFilterNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BoundingBoxFilterNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BoundingBoxFilterNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BoundingBoxFilterNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BoundingBoxFilterNodeValidationError) ErrorName() string {
	return "BoundingBoxFilterNodeValidationError"
}

// Error satisfies the builtin error interface
func (e BoundingBoxFilterNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBoundingBoxFilterNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BoundingBoxFilterNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BoundingBoxFilterNodeValidationError{}

var _BoundingBoxFilterNode_InputBoundingBoxes_Pattern = regexp.MustCompile("^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$")

var _BoundingBoxFilterNode_OutputPortName_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

// Validate checks the field values on Node with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Node) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Node with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NodeMultiError, or nil if none found.
func (m *Node) ValidateAll() error {
	return m.validate(true)
}

func (m *Node) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofNodeTypePresent := false
	switch v := m.NodeType.(type) {
	case *Node_ConstTensorNode:
		if v == nil {
			err := NodeValidationError{
				field:  "NodeType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofNodeTypePresent = true

		if all {
			switch v := interface{}(m.GetConstTensorNode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "ConstTensorNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "ConstTensorNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConstTensorNode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeValidationError{
					field:  "ConstTensorNode",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Node_ImageResizeNode:
		if v == nil {
			err := NodeValidationError{
				field:  "NodeType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofNodeTypePresent = true

		if all {
			switch v := interface{}(m.GetImageResizeNode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "ImageResizeNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "ImageResizeNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetImageResizeNode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeValidationError{
					field:  "ImageResizeNode",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Node_ImagePatchesNode:
		if v == nil {
			err := NodeValidationError{
				field:  "NodeType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofNodeTypePresent = true

		if all {
			switch v := interface{}(m.GetImagePatchesNode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "ImagePatchesNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "ImagePatchesNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetImagePatchesNode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeValidationError{
					field:  "ImagePatchesNode",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Node_VirtualCameraNode:
		if v == nil {
			err := NodeValidationError{
				field:  "NodeType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofNodeTypePresent = true

		if all {
			switch v := interface{}(m.GetVirtualCameraNode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "VirtualCameraNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "VirtualCameraNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVirtualCameraNode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeValidationError{
					field:  "VirtualCameraNode",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Node_ImageClassificationNode:
		if v == nil {
			err := NodeValidationError{
				field:  "NodeType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofNodeTypePresent = true

		if all {
			switch v := interface{}(m.GetImageClassificationNode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "ImageClassificationNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "ImageClassificationNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetImageClassificationNode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeValidationError{
					field:  "ImageClassificationNode",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Node_ImageObjectDetectionNode:
		if v == nil {
			err := NodeValidationError{
				field:  "NodeType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofNodeTypePresent = true

		if all {
			switch v := interface{}(m.GetImageObjectDetectionNode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "ImageObjectDetectionNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "ImageObjectDetectionNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetImageObjectDetectionNode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeValidationError{
					field:  "ImageObjectDetectionNode",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Node_ImageOcrNode:
		if v == nil {
			err := NodeValidationError{
				field:  "NodeType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofNodeTypePresent = true

		if all {
			switch v := interface{}(m.GetImageOcrNode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "ImageOcrNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "ImageOcrNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetImageOcrNode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeValidationError{
					field:  "ImageOcrNode",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Node_BoundingBoxFilterNode:
		if v == nil {
			err := NodeValidationError{
				field:  "NodeType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofNodeTypePresent = true

		if all {
			switch v := interface{}(m.GetBoundingBoxFilterNode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "BoundingBoxFilterNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "BoundingBoxFilterNode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBoundingBoxFilterNode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeValidationError{
					field:  "BoundingBoxFilterNode",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofNodeTypePresent {
		err := NodeValidationError{
			field:  "NodeType",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NodeMultiError(errors)
	}

	return nil
}

// NodeMultiError is an error wrapping multiple validation errors returned by
// Node.ValidateAll() if the designated constraints aren't met.
type NodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeMultiError) AllErrors() []error { return m }

// NodeValidationError is the validation error returned by Node.Validate if the
// designated constraints aren't met.
type NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeValidationError) ErrorName() string { return "NodeValidationError" }

// Error satisfies the builtin error interface
func (e NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeValidationError{}

// Validate checks the field values on Graph with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Graph) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Graph with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GraphMultiError, or nil if none found.
func (m *Graph) ValidateAll() error {
	return m.validate(true)
}

func (m *Graph) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GraphValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GraphValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GraphValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreatedAt

	if err := m._validateUuid(m.GetLicenseId()); err != nil {
		err = GraphValidationError{
			field:  "LicenseId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GraphMultiError(errors)
	}

	return nil
}

func (m *Graph) _validateUuid(uuid string) error {
	if matched := _inference_graph_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GraphMultiError is an error wrapping multiple validation errors returned by
// Graph.ValidateAll() if the designated constraints aren't met.
type GraphMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GraphMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GraphMultiError) AllErrors() []error { return m }

// GraphValidationError is the validation error returned by Graph.Validate if
// the designated constraints aren't met.
type GraphValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GraphValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GraphValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GraphValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GraphValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GraphValidationError) ErrorName() string { return "GraphValidationError" }

// Error satisfies the builtin error interface
func (e GraphValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGraph.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GraphValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GraphValidationError{}

// Validate checks the field values on ConstTensorNode_Uint64Array with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConstTensorNode_Uint64Array) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConstTensorNode_Uint64Array with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConstTensorNode_Uint64ArrayMultiError, or nil if none found.
func (m *ConstTensorNode_Uint64Array) ValidateAll() error {
	return m.validate(true)
}

func (m *ConstTensorNode_Uint64Array) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConstTensorNode_Uint64ArrayMultiError(errors)
	}

	return nil
}

// ConstTensorNode_Uint64ArrayMultiError is an error wrapping multiple
// validation errors returned by ConstTensorNode_Uint64Array.ValidateAll() if
// the designated constraints aren't met.
type ConstTensorNode_Uint64ArrayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConstTensorNode_Uint64ArrayMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConstTensorNode_Uint64ArrayMultiError) AllErrors() []error { return m }

// ConstTensorNode_Uint64ArrayValidationError is the validation error returned
// by ConstTensorNode_Uint64Array.Validate if the designated constraints
// aren't met.
type ConstTensorNode_Uint64ArrayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConstTensorNode_Uint64ArrayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConstTensorNode_Uint64ArrayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConstTensorNode_Uint64ArrayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConstTensorNode_Uint64ArrayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConstTensorNode_Uint64ArrayValidationError) ErrorName() string {
	return "ConstTensorNode_Uint64ArrayValidationError"
}

// Error satisfies the builtin error interface
func (e ConstTensorNode_Uint64ArrayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConstTensorNode_Uint64Array.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConstTensorNode_Uint64ArrayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConstTensorNode_Uint64ArrayValidationError{}

// Validate checks the field values on ConstTensorNode_Int64Array with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConstTensorNode_Int64Array) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConstTensorNode_Int64Array with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConstTensorNode_Int64ArrayMultiError, or nil if none found.
func (m *ConstTensorNode_Int64Array) ValidateAll() error {
	return m.validate(true)
}

func (m *ConstTensorNode_Int64Array) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConstTensorNode_Int64ArrayMultiError(errors)
	}

	return nil
}

// ConstTensorNode_Int64ArrayMultiError is an error wrapping multiple
// validation errors returned by ConstTensorNode_Int64Array.ValidateAll() if
// the designated constraints aren't met.
type ConstTensorNode_Int64ArrayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConstTensorNode_Int64ArrayMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConstTensorNode_Int64ArrayMultiError) AllErrors() []error { return m }

// ConstTensorNode_Int64ArrayValidationError is the validation error returned
// by ConstTensorNode_Int64Array.Validate if the designated constraints aren't met.
type ConstTensorNode_Int64ArrayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConstTensorNode_Int64ArrayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConstTensorNode_Int64ArrayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConstTensorNode_Int64ArrayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConstTensorNode_Int64ArrayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConstTensorNode_Int64ArrayValidationError) ErrorName() string {
	return "ConstTensorNode_Int64ArrayValidationError"
}

// Error satisfies the builtin error interface
func (e ConstTensorNode_Int64ArrayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConstTensorNode_Int64Array.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConstTensorNode_Int64ArrayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConstTensorNode_Int64ArrayValidationError{}

// Validate checks the field values on ConstTensorNode_Float64Array with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConstTensorNode_Float64Array) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConstTensorNode_Float64Array with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConstTensorNode_Float64ArrayMultiError, or nil if none found.
func (m *ConstTensorNode_Float64Array) ValidateAll() error {
	return m.validate(true)
}

func (m *ConstTensorNode_Float64Array) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConstTensorNode_Float64ArrayMultiError(errors)
	}

	return nil
}

// ConstTensorNode_Float64ArrayMultiError is an error wrapping multiple
// validation errors returned by ConstTensorNode_Float64Array.ValidateAll() if
// the designated constraints aren't met.
type ConstTensorNode_Float64ArrayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConstTensorNode_Float64ArrayMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConstTensorNode_Float64ArrayMultiError) AllErrors() []error { return m }

// ConstTensorNode_Float64ArrayValidationError is the validation error returned
// by ConstTensorNode_Float64Array.Validate if the designated constraints
// aren't met.
type ConstTensorNode_Float64ArrayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConstTensorNode_Float64ArrayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConstTensorNode_Float64ArrayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConstTensorNode_Float64ArrayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConstTensorNode_Float64ArrayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConstTensorNode_Float64ArrayValidationError) ErrorName() string {
	return "ConstTensorNode_Float64ArrayValidationError"
}

// Error satisfies the builtin error interface
func (e ConstTensorNode_Float64ArrayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConstTensorNode_Float64Array.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConstTensorNode_Float64ArrayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConstTensorNode_Float64ArrayValidationError{}

// Validate checks the field values on ImagePatchesNode_TargetSizeSource with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ImagePatchesNode_TargetSizeSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImagePatchesNode_TargetSizeSource
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ImagePatchesNode_TargetSizeSourceMultiError, or nil if none found.
func (m *ImagePatchesNode_TargetSizeSource) ValidateAll() error {
	return m.validate(true)
}

func (m *ImagePatchesNode_TargetSizeSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofSourcePresent := false
	switch v := m.Source.(type) {
	case *ImagePatchesNode_TargetSizeSource_Topic:
		if v == nil {
			err := ImagePatchesNode_TargetSizeSourceValidationError{
				field:  "Source",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSourcePresent = true

		if utf8.RuneCountInString(m.GetTopic()) < 1 {
			err := ImagePatchesNode_TargetSizeSourceValidationError{
				field:  "Topic",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ImagePatchesNode_TargetSizeSource_Topic_Pattern.MatchString(m.GetTopic()) {
			err := ImagePatchesNode_TargetSizeSourceValidationError{
				field:  "Topic",
				reason: "value does not match regex pattern \"^[a-zA-Z0-9_]+\\\\/[a-zA-Z0-9_]+([?]timeout=\\\\d+)?$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *ImagePatchesNode_TargetSizeSource_Size:
		if v == nil {
			err := ImagePatchesNode_TargetSizeSourceValidationError{
				field:  "Source",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSourcePresent = true

		if all {
			switch v := interface{}(m.GetSize()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImagePatchesNode_TargetSizeSourceValidationError{
						field:  "Size",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImagePatchesNode_TargetSizeSourceValidationError{
						field:  "Size",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSize()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImagePatchesNode_TargetSizeSourceValidationError{
					field:  "Size",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofSourcePresent {
		err := ImagePatchesNode_TargetSizeSourceValidationError{
			field:  "Source",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ImagePatchesNode_TargetSizeSourceMultiError(errors)
	}

	return nil
}

// ImagePatchesNode_TargetSizeSourceMultiError is an error wrapping multiple
// validation errors returned by
// ImagePatchesNode_TargetSizeSource.ValidateAll() if the designated
// constraints aren't met.
type ImagePatchesNode_TargetSizeSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImagePatchesNode_TargetSizeSourceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImagePatchesNode_TargetSizeSourceMultiError) AllErrors() []error { return m }

// ImagePatchesNode_TargetSizeSourceValidationError is the validation error
// returned by ImagePatchesNode_TargetSizeSource.Validate if the designated
// constraints aren't met.
type ImagePatchesNode_TargetSizeSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImagePatchesNode_TargetSizeSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImagePatchesNode_TargetSizeSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImagePatchesNode_TargetSizeSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImagePatchesNode_TargetSizeSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImagePatchesNode_TargetSizeSourceValidationError) ErrorName() string {
	return "ImagePatchesNode_TargetSizeSourceValidationError"
}

// Error satisfies the builtin error interface
func (e ImagePatchesNode_TargetSizeSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImagePatchesNode_TargetSizeSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImagePatchesNode_TargetSizeSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImagePatchesNode_TargetSizeSourceValidationError{}

var _ImagePatchesNode_TargetSizeSource_Topic_Pattern = regexp.MustCompile("^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$")

// Validate checks the field values on
// ImagePatchesNode_TargetSizeSource_ImageSize with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImagePatchesNode_TargetSizeSource_ImageSize) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ImagePatchesNode_TargetSizeSource_ImageSize with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ImagePatchesNode_TargetSizeSource_ImageSizeMultiError, or nil if none found.
func (m *ImagePatchesNode_TargetSizeSource_ImageSize) ValidateAll() error {
	return m.validate(true)
}

func (m *ImagePatchesNode_TargetSizeSource_ImageSize) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetHeight() < 0 {
		err := ImagePatchesNode_TargetSizeSource_ImageSizeValidationError{
			field:  "Height",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWidth() < 0 {
		err := ImagePatchesNode_TargetSizeSource_ImageSizeValidationError{
			field:  "Width",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ImagePatchesNode_TargetSizeSource_ImageSizeMultiError(errors)
	}

	return nil
}

// ImagePatchesNode_TargetSizeSource_ImageSizeMultiError is an error wrapping
// multiple validation errors returned by
// ImagePatchesNode_TargetSizeSource_ImageSize.ValidateAll() if the designated
// constraints aren't met.
type ImagePatchesNode_TargetSizeSource_ImageSizeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImagePatchesNode_TargetSizeSource_ImageSizeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImagePatchesNode_TargetSizeSource_ImageSizeMultiError) AllErrors() []error { return m }

// ImagePatchesNode_TargetSizeSource_ImageSizeValidationError is the validation
// error returned by ImagePatchesNode_TargetSizeSource_ImageSize.Validate if
// the designated constraints aren't met.
type ImagePatchesNode_TargetSizeSource_ImageSizeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImagePatchesNode_TargetSizeSource_ImageSizeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImagePatchesNode_TargetSizeSource_ImageSizeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImagePatchesNode_TargetSizeSource_ImageSizeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImagePatchesNode_TargetSizeSource_ImageSizeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImagePatchesNode_TargetSizeSource_ImageSizeValidationError) ErrorName() string {
	return "ImagePatchesNode_TargetSizeSource_ImageSizeValidationError"
}

// Error satisfies the builtin error interface
func (e ImagePatchesNode_TargetSizeSource_ImageSizeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImagePatchesNode_TargetSizeSource_ImageSize.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImagePatchesNode_TargetSizeSource_ImageSizeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImagePatchesNode_TargetSizeSource_ImageSizeValidationError{}

// Validate checks the field values on BoundingBoxFilterNode_ThresholdSource
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BoundingBoxFilterNode_ThresholdSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BoundingBoxFilterNode_ThresholdSource
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BoundingBoxFilterNode_ThresholdSourceMultiError, or nil if none found.
func (m *BoundingBoxFilterNode_ThresholdSource) ValidateAll() error {
	return m.validate(true)
}

func (m *BoundingBoxFilterNode_ThresholdSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofSourcePresent := false
	switch v := m.Source.(type) {
	case *BoundingBoxFilterNode_ThresholdSource_Topic:
		if v == nil {
			err := BoundingBoxFilterNode_ThresholdSourceValidationError{
				field:  "Source",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSourcePresent = true

		if utf8.RuneCountInString(m.GetTopic()) < 1 {
			err := BoundingBoxFilterNode_ThresholdSourceValidationError{
				field:  "Topic",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_BoundingBoxFilterNode_ThresholdSource_Topic_Pattern.MatchString(m.GetTopic()) {
			err := BoundingBoxFilterNode_ThresholdSourceValidationError{
				field:  "Topic",
				reason: "value does not match regex pattern \"^[a-zA-Z0-9_]+\\\\/[a-zA-Z0-9_]+([?]timeout=\\\\d+)?$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *BoundingBoxFilterNode_ThresholdSource_Value:
		if v == nil {
			err := BoundingBoxFilterNode_ThresholdSourceValidationError{
				field:  "Source",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSourcePresent = true

		if val := m.GetValue(); val < 0 || val > 1 {
			err := BoundingBoxFilterNode_ThresholdSourceValidationError{
				field:  "Value",
				reason: "value must be inside range [0, 1]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofSourcePresent {
		err := BoundingBoxFilterNode_ThresholdSourceValidationError{
			field:  "Source",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BoundingBoxFilterNode_ThresholdSourceMultiError(errors)
	}

	return nil
}

// BoundingBoxFilterNode_ThresholdSourceMultiError is an error wrapping
// multiple validation errors returned by
// BoundingBoxFilterNode_ThresholdSource.ValidateAll() if the designated
// constraints aren't met.
type BoundingBoxFilterNode_ThresholdSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BoundingBoxFilterNode_ThresholdSourceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BoundingBoxFilterNode_ThresholdSourceMultiError) AllErrors() []error { return m }

// BoundingBoxFilterNode_ThresholdSourceValidationError is the validation error
// returned by BoundingBoxFilterNode_ThresholdSource.Validate if the
// designated constraints aren't met.
type BoundingBoxFilterNode_ThresholdSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BoundingBoxFilterNode_ThresholdSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BoundingBoxFilterNode_ThresholdSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BoundingBoxFilterNode_ThresholdSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BoundingBoxFilterNode_ThresholdSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BoundingBoxFilterNode_ThresholdSourceValidationError) ErrorName() string {
	return "BoundingBoxFilterNode_ThresholdSourceValidationError"
}

// Error satisfies the builtin error interface
func (e BoundingBoxFilterNode_ThresholdSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBoundingBoxFilterNode_ThresholdSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BoundingBoxFilterNode_ThresholdSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BoundingBoxFilterNode_ThresholdSourceValidationError{}

var _BoundingBoxFilterNode_ThresholdSource_Topic_Pattern = regexp.MustCompile("^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$")
